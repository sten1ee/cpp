#include "java12_parser.h"


short** java12_parser::action_table()
{

  static short s0[] =
  {  4,
    24,   2,
    -1, -35
  };
  static short s1[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s2[] =
  {  4,
     2,  -1,
    -1,   0
  };
  static short s3[] =
  {  4,
     2,  -2,
    -1,   0
  };
  static short s4[] =
  {  4,
    25,  11,
    -1, -37
  };
  static short s5[] =
  {  2,
    -1, -34
  };
  static short s6[] =
  {  2,
    -1, -31
  };
  static short s7[] =
  {  6,
    14,  17, 15,  18,
    -1,   0
  };
  static short s8[] =
  {  2,
    -1, -29
  };
  static short s9[] =
  {  2,
    -1, -30
  };
  static short s10[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s11[] =
  { 28,
     2, -39, 15,  20, 26,  21, 27,  22, 28,  23, 29,  24, 30,  25,
    31,  26, 32,  27, 33,  28, 34,  29, 35,  30,101,  31,
    -1, -52
  };
  static short s12[] =
  {  4,
    25,  11,
    -1, -36
  };
  static short s13[] =
  {  2,
    -1, -40
  };
  static short s14[] =
  {  2,
    -1, -45
  };
  static short s15[] =
  {  2,
    -1, -46
  };
  static short s16[] =
  {  4,
    13,  41,
    -1,   0
  };
  static short s17[] =
  {  2,
    -1, -44
  };
  static short s18[] =
  {  6,
    14,  42, 15,  43,
    -1,   0
  };
  static short s19[] =
  {  2,
    -1, -51
  };
  static short s20[] =
  {  2,
    -1, -56
  };
  static short s21[] =
  {  2,
    -1, -57
  };
  static short s22[] =
  {  2,
    -1, -58
  };
  static short s23[] =
  {  2,
    -1, -59
  };
  static short s24[] =
  {  2,
    -1, -60
  };
  static short s25[] =
  {  2,
    -1, -61
  };
  static short s26[] =
  {  2,
    -1, -62
  };
  static short s27[] =
  {  2,
    -1, -63
  };
  static short s28[] =
  {  2,
    -1, -64
  };
  static short s29[] =
  {  2,
    -1, -65
  };
  static short s30[] =
  {  2,
    -1, -66
  };
  static short s31[] =
  {  4,
     2, -33,
    -1,   0
  };
  static short s32[] =
  { 28,
     2, -38, 15,  20, 26,  21, 27,  22, 28,  23, 29,  24, 30,  25,
    31,  26, 32,  27, 33,  28, 34,  29, 35,  30,101,  31,
    -1, -52
  };
  static short s33[] =
  {  2,
    -1, -42
  };
  static short s34[] =
  {  2,
    -1, -49
  };
  static short s35[] =
  {  2,
    -1, -50
  };
  static short s36[] =
  {  6,
    36,  45, 43,  46,
    -1,   0
  };
  static short s37[] =
  { 24,
    26,  21, 27,  22, 28,  23, 29,  24, 30,  25, 31,  26, 32,  27,
    33,  28, 34,  29, 35,  30,101,  31,
    -1, -53
  };
  static short s38[] =
  {  2,
    -1, -54
  };
  static short s39[] =
  {  2,
    -1, -41
  };
  static short s40[] =
  {  2,
    -1, -32
  };
  static short s41[] =
  {  6,
    13,  41, 16,  48,
    -1,   0
  };
  static short s42[] =
  {  2,
    -1, -47
  };
  static short s43[] =
  {  2,
    -1, -43
  };
  static short s44[] =
  {  4,
    13,  49,
    -1,   0
  };
  static short s45[] =
  {  4,
    13,  50,
    -1,   0
  };
  static short s46[] =
  {  2,
    -1, -55
  };
  static short s47[] =
  {  4,
    15,  51,
    -1,   0
  };
  static short s48[] =
  {  4,
    37,  52,
    -1, -69
  };
  static short s49[] =
  {  6,
    18,-128, 37,  55,
    -1,   0
  };
  static short s50[] =
  {  2,
    -1, -48
  };
  static short s51[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s52[] =
  {  6,
    18, -72, 38,  61,
    -1,   0
  };
  static short s53[] =
  {  2,
    -1, -70
  };
  static short s54[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s55[] =
  {  4,
    18,  66,
    -1,   0
  };
  static short s56[] =
  {  6,
    17,  68, 18,-129,
    -1,   0
  };
  static short s57[] =
  {  2,
    -1, -25
  };
  static short s58[] =
  {  4,
    14,  17,
    -1, -24
  };
  static short s59[] =
  {  2,
    -1, -68
  };
  static short s60[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s61[] =
  {  4,
    18,  71,
    -1,   0
  };
  static short s62[] =
  {  4,
    18, -73,
    -1,   0
  };
  static short s63[] =
  {  2,
    -1, -26
  };
  static short s64[] =
  {  2,
    -1,-130
  };
  static short s65[] =
  { 26,
    19,-133, 26,  21, 27,  22, 28,  23, 29,  24, 30,  25, 31,  26,
    32,  27, 33,  28, 34,  29, 35,  30,101,  31,
    -1, -52
  };
  static short s66[] =
  {  2,
    -1,-127
  };
  static short s67[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s68[] =
  {  2,
    -1, -74
  };
  static short s69[] =
  {  6,
    17,  84, 18, -71,
    -1,   0
  };
  static short s70[] =
  { 28,
    18,  85, 19, -77, 26,  21, 27,  22, 28,  23, 29,  86, 30,  25,
    31,  26, 32,  27, 33,  28, 34,  29, 35,  30,101,  31,
    -1, -52
  };
  static short s71[] =
  {  2,
    -1, -67
  };
  static short s72[] =
  {  2,
    -1,-139
  };
  static short s73[] =
  {  2,
    -1,-140
  };
  static short s74[] =
  { 26,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 36,  45, 39, 107, 43,  46,
    -1,   0
  };
  static short s75[] =
  {  2,
    -1,-141
  };
  static short s76[] =
  {  4,
    15, 117,
    -1,   0
  };
  static short s77[] =
  {  4,
    19, 118,
    -1,   0
  };
  static short s78[] =
  { 26,
    19,-134, 26,  21, 27,  22, 28,  23, 29,  24, 30,  25, 31,  26,
    32,  27, 33,  28, 34,  29, 35,  30,101,  31,
    -1, -52
  };
  static short s79[] =
  {  2,
    -1,-135
  };
  static short s80[] =
  {  2,
    -1,-137
  };
  static short s81[] =
  {  2,
    -1,-138
  };
  static short s82[] =
  {  2,
    -1,-131
  };
  static short s83[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s84[] =
  { 94,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19,-150, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136, 55, 137,
    56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s85[] =
  {  4,
    18,  85,
    -1, -59
  };
  static short s86[] =
  {  2,
    -1, -88
  };
  static short s87[] =
  { 26,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 36, 194, 39, 107, 43,  46,
    -1,   0
  };
  static short s88[] =
  {  4,
    19, 197,
    -1,   0
  };
  static short s89[] =
  { 28,
    18,  85, 19, -78, 26,  21, 27,  22, 28,  23, 29,  86, 30,  25,
    31,  26, 32,  27, 33,  28, 34,  29, 35,  30,101,  31,
    -1, -52
  };
  static short s90[] =
  {  2,
    -1, -79
  };
  static short s91[] =
  {  2,
    -1, -81
  };
  static short s92[] =
  {  2,
    -1, -82
  };
  static short s93[] =
  {  2,
    -1, -83
  };
  static short s94[] =
  {  2,
    -1, -84
  };
  static short s95[] =
  {  2,
    -1, -85
  };
  static short s96[] =
  {  2,
    -1, -86
  };
  static short s97[] =
  {  6,
    15, 199, 18,  85,
    -1,   0
  };
  static short s98[] =
  {  2,
    -1, -12
  };
  static short s99[] =
  {  2,
    -1, -15
  };
  static short s100[] =
  {  2,
    -1, -16
  };
  static short s101[] =
  {  2,
    -1, -17
  };
  static short s102[] =
  {  2,
    -1, -18
  };
  static short s103[] =
  {  2,
    -1, -19
  };
  static short s104[] =
  {  2,
    -1, -20
  };
  static short s105[] =
  {  2,
    -1, -21
  };
  static short s106[] =
  {  4,
    13, 202,
    -1,   0
  };
  static short s107[] =
  {  4,
    13, 204,
    -1,   0
  };
  static short s108[] =
  {  6,
    11, 209, 13,  -9,
    -1,   0
  };
  static short s109[] =
  {  4,
    13, -10,
    -1,   0
  };
  static short s110[] =
  {  2,
    -1, -11
  };
  static short s111[] =
  {  2,
    -1, -13
  };
  static short s112[] =
  {  2,
    -1, -14
  };
  static short s113[] =
  {  2,
    -1, -22
  };
  static short s114[] =
  {  2,
    -1, -23
  };
  static short s115[] =
  {  6,
    11, 209, 14,  17,
    -1, -24
  };
  static short s116[] =
  {  2,
    -1,-142
  };
  static short s117[] =
  {  2,
    -1,-132
  };
  static short s118[] =
  {  2,
    -1,-136
  };
  static short s119[] =
  {  2,
    -1, -75
  };
  static short s120[] =
  {  4,
    23, 212,
    -1, -31
  };
  static short s121[] =
  {  2,
    -1,-183
  };
  static short s122[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s123[] =
  { 20,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7,
    -1, -61
  };
  static short s124[] =
  {  4,
    21, 246,
    -1, -63
  };
  static short s125[] =
  {  4,
    14, 247,
    -1,   0
  };
  static short s126[] =
  {  2,
    -1,-241
  };
  static short s127[] =
  {  4,
    14, 248,
    -1,   0
  };
  static short s128[] =
  {  4,
    21, 249,
    -1,   0
  };
  static short s129[] =
  {  4,
    21, 250,
    -1,   0
  };
  static short s130[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 129, 46, 130, 49, 131, 50, 132, 51, 133,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s131[] =
  {  4,
    21, 253,
    -1,   0
  };
  static short s132[] =
  {  4,
    21, 254,
    -1,   0
  };
  static short s133[] =
  {  6,
    13, 255, 15,-223,
    -1,   0
  };
  static short s134[] =
  {  6,
    13, 255, 15,-223,
    -1,   0
  };
  static short s135[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 15,-350, 21, 213, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s136[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s137[] =
  {  4,
    18,  85,
    -1,   0
  };
  static short s138[] =
  { 20,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7,
    -1,   0
  };
  static short s139[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s140[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s141[] =
  {  2,
    -1,  -3
  };
  static short s142[] =
  {  2,
    -1,  -4
  };
  static short s143[] =
  {  2,
    -1,  -5
  };
  static short s144[] =
  {  2,
    -1,  -6
  };
  static short s145[] =
  {  2,
    -1,  -7
  };
  static short s146[] =
  {  2,
    -1,  -8
  };
  static short s147[] =
  {  2,
    -1,-240
  };
  static short s148[] =
  {  4,
    13, 270,
    -1,   0
  };
  static short s149[] =
  {  8,
    11, 209, 13,  -9, 14, 272,
    -1,   0
  };
  static short s150[] =
  {  6,
    13, -23, 14, 273,
    -1,   0
  };
  static short s151[] =
  { 14,
    11, 274, 13, -24, 14, 275, 21, 276, 60,-281, 61,-281,
    -1,-335
  };
  static short s152[] =
  {  2,
    -1,-156
  };
  static short s153[] =
  {  2,
    -1,-157
  };
  static short s154[] =
  {  2,
    -1,-172
  };
  static short s155[] =
  { 94,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19,-151, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136, 55, 137,
    56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s156[] =
  {  4,
    14, 278,
    -1,-280
  };
  static short s157[] =
  {  4,
    19, 279,
    -1,   0
  };
  static short s158[] =
  {  2,
    -1,-152
  };
  static short s159[] =
  {  2,
    -1,-154
  };
  static short s160[] =
  {  2,
    -1,-155
  };
  static short s161[] =
  {  4,
    15, 280,
    -1,   0
  };
  static short s162[] =
  {  2,
    -1,-161
  };
  static short s163[] =
  {  2,
    -1,-162
  };
  static short s164[] =
  {  2,
    -1,-163
  };
  static short s165[] =
  {  2,
    -1,-164
  };
  static short s166[] =
  {  2,
    -1,-165
  };
  static short s167[] =
  {  2,
    -1,-166
  };
  static short s168[] =
  {  2,
    -1,-173
  };
  static short s169[] =
  {  2,
    -1,-174
  };
  static short s170[] =
  {  2,
    -1,-175
  };
  static short s171[] =
  {  2,
    -1,-176
  };
  static short s172[] =
  {  2,
    -1,-177
  };
  static short s173[] =
  {  2,
    -1,-178
  };
  static short s174[] =
  {  2,
    -1,-179
  };
  static short s175[] =
  {  2,
    -1,-180
  };
  static short s176[] =
  {  2,
    -1,-181
  };
  static short s177[] =
  {  2,
    -1,-182
  };
  static short s178[] =
  {  4,
    15, 281,
    -1,   0
  };
  static short s179[] =
  {  2,
    -1,-187
  };
  static short s180[] =
  {  2,
    -1,-188
  };
  static short s181[] =
  {  2,
    -1,-189
  };
  static short s182[] =
  {  6,
    60,-282, 61,-282,
    -1,-190
  };
  static short s183[] =
  {  6,
    60,-283, 61,-283,
    -1,-191
  };
  static short s184[] =
  {  8,
    15,-192, 17,-192, 22,-192,
    -1,-245
  };
  static short s185[] =
  {  8,
    15,-193, 17,-193, 22,-193,
    -1,-243
  };
  static short s186[] =
  {  4,
    11, 282,
    -1,-238
  };
  static short s187[] =
  {  2,
    -1,-239
  };
  static short s188[] =
  { 26,
    20,-336, 84,-336, 85,-336, 86,-336, 87,-336, 88,-336, 89,-336,
    90,-336, 91,-336, 92,-336, 93,-336, 94,-336,
    -1,-244
  };
  static short s189[] =
  { 26,
    20,-337, 84,-337, 85,-337, 86,-337, 87,-337, 88,-337, 89,-337,
    90,-337, 91,-337, 92,-337, 93,-337, 94,-337,
    -1,-246
  };
  static short s190[] =
  {  6,
    60, 283, 61, 284,
    -1,   0
  };
  static short s191[] =
  { 26,
    20, 285, 84, 286, 85, 287, 86, 288, 87, 289, 88, 290, 89, 291,
    90, 292, 91, 293, 92, 294, 93, 295, 94, 296,
    -1,   0
  };
  static short s192[] =
  {  2,
    -1,-116
  };
  static short s193[] =
  {  4,
    13, 298,
    -1,   0
  };
  static short s194[] =
  {  4,
    21, 299,
    -1, -29
  };
  static short s195[] =
  {  6,
    18,-109, 40, 300,
    -1,   0
  };
  static short s196[] =
  {  2,
    -1, -76
  };
  static short s197[] =
  {  2,
    -1, -80
  };
  static short s198[] =
  {  2,
    -1,-115
  };
  static short s199[] =
  {  2,
    -1,-114
  };
  static short s200[] =
  {  2,
    -1, -98
  };
  static short s201[] =
  {  4,
    21, 303,
    -1,   0
  };
  static short s202[] =
  {  6,
    11, 304, 40, 300,
    -1,-109
  };
  static short s203[] =
  {  4,
    21, 303,
    -1, -94
  };
  static short s204[] =
  {  6,
    15, 306, 17, 307,
    -1,   0
  };
  static short s205[] =
  {  2,
    -1, -90
  };
  static short s206[] =
  {  6,
    11, 308, 20, 309,
    -1, -92
  };
  static short s207[] =
  {  6,
    11, 304, 40, 300,
    -1,-109
  };
  static short s208[] =
  {  4,
    12, 311,
    -1,   0
  };
  static short s209[] =
  {  4,
    11, 312,
    -1, -27
  };
  static short s210[] =
  {  4,
    11, 312,
    -1, -28
  };
  static short s211[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 129, 46, 130, 49, 131, 50, 132, 51, 133,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s212[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s213[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s214[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s215[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s216[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s217[] =
  {  6,
    11, 209, 14, 272,
    -1,   0
  };
  static short s218[] =
  {  4,
    14, 273,
    -1,   0
  };
  static short s219[] =
  { 32,
    11, 274, 14, 275, 20,-335, 21, 276, 84,-335, 85,-335, 86,-335,
    87,-335, 88,-335, 89,-335, 90,-335, 91,-335, 92,-335, 93,-335,
    94,-335,
    -1,-281
  };
  static short s220[] =
  {  4,
    22, 321,
    -1,   0
  };
  static short s221[] =
  {  2,
    -1,-333
  };
  static short s222[] =
  {  2,
    -1,-286
  };
  static short s223[] =
  {  2,
    -1,-287
  };
  static short s224[] =
  {  2,
    -1,-282
  };
  static short s225[] =
  {  2,
    -1,-283
  };
  static short s226[] =
  {  2,
    -1,-245
  };
  static short s227[] =
  {  2,
    -1,-243
  };
  static short s228[] =
  {  6,
    60, 283, 61, 284,
    -1,-293
  };
  static short s229[] =
  {  2,
    -1,-300
  };
  static short s230[] =
  {  2,
    -1,-290
  };
  static short s231[] =
  {  2,
    -1,-296
  };
  static short s232[] =
  {  8,
    16, 322, 66, 323, 67, 324,
    -1,-304
  };
  static short s233[] =
  {  6,
    62, 325, 63, 326,
    -1,-307
  };
  static short s234[] =
  {  8,
    68, 327, 69, 328, 70, 329,
    -1,-311
  };
  static short s235[] =
  { 12,
    71, 330, 72, 331, 73, 332, 74, 333, 75, 334,
    -1,-317
  };
  static short s236[] =
  {  6,
    76, 335, 77, 336,
    -1,-320
  };
  static short s237[] =
  {  4,
    78, 337,
    -1,-322
  };
  static short s238[] =
  {  4,
    79, 338,
    -1,-324
  };
  static short s239[] =
  {  4,
    80, 339,
    -1,-326
  };
  static short s240[] =
  {  4,
    81, 340,
    -1,-328
  };
  static short s241[] =
  {  6,
    82, 341, 83, 342,
    -1,-330
  };
  static short s242[] =
  {  2,
    -1,-332
  };
  static short s243[] =
  {  2,
    -1,-352
  };
  static short s244[] =
  {  4,
    13, 270,
    -1,   0
  };
  static short s245[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s246[] =
  {  4,
    36, 345,
    -1,   0
  };
  static short s247[] =
  {  4,
    13, 346,
    -1,   0
  };
  static short s248[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s249[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s250[] =
  {  4,
    21, 246,
    -1,   0
  };
  static short s251[] =
  {  4,
    50, 349,
    -1,   0
  };
  static short s252[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s253[] =
  { 50,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 15,-214, 21, 123, 31, 351, 39, 126, 41, 127,
    42, 128, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s254[] =
  {  4,
    15,-224,
    -1,   0
  };
  static short s255[] =
  {  4,
    15, 357,
    -1,   0
  };
  static short s256[] =
  {  4,
    15, 358,
    -1,   0
  };
  static short s257[] =
  {  4,
    15,-351,
    -1,   0
  };
  static short s258[] =
  {  4,
    15, 359,
    -1,   0
  };
  static short s259[] =
  {  4,
    15, 360,
    -1,   0
  };
  static short s260[] =
  {  6,
    57, 361, 58,-232,
    -1,   0
  };
  static short s261[] =
  {  4,
    11, 365,
    -1,   0
  };
  static short s262[] =
  {  6,
    11, 365, 21, -25,
    -1,   0
  };
  static short s263[] =
  {  4,
    21, 371,
    -1,   0
  };
  static short s264[] =
  {  8,
    11, 274, 14, 275, 21, 276,
    -1,-281
  };
  static short s265[] =
  {  2,
    -1,-244
  };
  static short s266[] =
  {  2,
    -1,-246
  };
  static short s267[] =
  {  2,
    -1,-291
  };
  static short s268[] =
  {  2,
    -1,-292
  };
  static short s269[] =
  {  2,
    -1, -94
  };
  static short s270[] =
  {  6,
    15,-159, 17, 307,
    -1,   0
  };
  static short s271[] =
  {  4,
    36, 372,
    -1,   0
  };
  static short s272[] =
  {  4,
    36, 373,
    -1,   0
  };
  static short s273[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 12, 311, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s274[] =
  { 10,
    13,  41, 36, 375, 41, 376, 42, 377,
    -1,   0
  };
  static short s275[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s276[] =
  {  2,
    -1,-153
  };
  static short s277[] =
  {  6,
    13, 381, 59, 382,
    -1,   0
  };
  static short s278[] =
  {  2,
    -1,-149
  };
  static short s279[] =
  {  2,
    -1,-158
  };
  static short s280[] =
  {  2,
    -1,-186
  };
  static short s281[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s282[] =
  {  2,
    -1,-284
  };
  static short s283[] =
  {  2,
    -1,-285
  };
  static short s284[] =
  {  2,
    -1,-338
  };
  static short s285[] =
  {  2,
    -1,-339
  };
  static short s286[] =
  {  2,
    -1,-340
  };
  static short s287[] =
  {  2,
    -1,-341
  };
  static short s288[] =
  {  2,
    -1,-342
  };
  static short s289[] =
  {  2,
    -1,-343
  };
  static short s290[] =
  {  2,
    -1,-344
  };
  static short s291[] =
  {  2,
    -1,-345
  };
  static short s292[] =
  {  2,
    -1,-346
  };
  static short s293[] =
  {  2,
    -1,-347
  };
  static short s294[] =
  {  2,
    -1,-348
  };
  static short s295[] =
  {  2,
    -1,-349
  };
  static short s296[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s297[] =
  {  4,
    37,  52,
    -1, -69
  };
  static short s298[] =
  { 24,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 22,-103, 31, 386,
    -1,   0
  };
  static short s299[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s300[] =
  {  4,
    18, 393,
    -1,   0
  };
  static short s301[] =
  {  2,
    -1,-110
  };
  static short s302[] =
  { 24,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 22,-103, 31, 386,
    -1,   0
  };
  static short s303[] =
  {  4,
    12, 396,
    -1,   0
  };
  static short s304[] =
  {  2,
    -1,-100
  };
  static short s305[] =
  {  2,
    -1, -89
  };
  static short s306[] =
  {  4,
    13, 270,
    -1,   0
  };
  static short s307[] =
  {  4,
    12, 398,
    -1,   0
  };
  static short s308[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 18, 399, 21, 213, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s309[] =
  {  2,
    -1, -99
  };
  static short s310[] =
  {  2,
    -1,-269
  };
  static short s311[] =
  {  4,
    12, 403,
    -1,   0
  };
  static short s312[] =
  {  2,
    -1,-184
  };
  static short s313[] =
  {  8,
    11, 209, 14, 272, 22,-267,
    -1,   0
  };
  static short s314[] =
  { 32,
    11, 274, 14, 275, 20,-335, 21, 276, 84,-335, 85,-335, 86,-335,
    87,-335, 88,-335, 89,-335, 90,-335, 91,-335, 92,-335, 93,-335,
    94,-335,
    -1,-281
  };
  static short s315[] =
  {  4,
    22, 407,
    -1,   0
  };
  static short s316[] =
  {  2,
    -1,-288
  };
  static short s317[] =
  {  2,
    -1,-289
  };
  static short s318[] =
  {  2,
    -1,-294
  };
  static short s319[] =
  {  2,
    -1,-295
  };
  static short s320[] =
  {  2,
    -1,-242
  };
  static short s321[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s322[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s323[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s324[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s325[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s326[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s327[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s328[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s329[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s330[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s331[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s332[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s333[] =
  { 20,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7,
    -1,   0
  };
  static short s334[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s335[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s336[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s337[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s338[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s339[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s340[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s341[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s342[] =
  {  6,
    15,-160, 17, 307,
    -1,   0
  };
  static short s343[] =
  {  4,
    22, 430,
    -1,   0
  };
  static short s344[] =
  {  2,
    -1,-248
  };
  static short s345[] =
  {  4,
    21, 431,
    -1,-272
  };
  static short s346[] =
  {  4,
    22, 432,
    -1,   0
  };
  static short s347[] =
  {  4,
    22, 433,
    -1,   0
  };
  static short s348[] =
  {  4,
    21, 434,
    -1,   0
  };
  static short s349[] =
  {  4,
    22, 435,
    -1,   0
  };
  static short s350[] =
  { 20,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7,
    -1,   0
  };
  static short s351[] =
  {  4,
    15,-217,
    -1,   0
  };
  static short s352[] =
  {  2,
    -1,-221
  };
  static short s353[] =
  {  4,
    15, 436,
    -1,   0
  };
  static short s354[] =
  {  4,
    15,-215,
    -1,   0
  };
  static short s355[] =
  {  6,
    15,-216, 17, 437,
    -1,   0
  };
  static short s356[] =
  {  2,
    -1,-225
  };
  static short s357[] =
  {  2,
    -1,-226
  };
  static short s358[] =
  {  2,
    -1,-227
  };
  static short s359[] =
  {  2,
    -1,-228
  };
  static short s360[] =
  {  4,
    21, 438,
    -1,   0
  };
  static short s361[] =
  {  6,
    57, 361, 58,-233,
    -1,-230
  };
  static short s362[] =
  {  4,
    58, 440,
    -1,   0
  };
  static short s363[] =
  {  2,
    -1,-234
  };
  static short s364[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 12, 311, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s365[] =
  {  6,
    11, 312, 18, 399,
    -1,   0
  };
  static short s366[] =
  {  4,
    11, 365,
    -1,-267
  };
  static short s367[] =
  {  2,
    -1,-264
  };
  static short s368[] =
  {  6,
    11, 312, 18, 399,
    -1,   0
  };
  static short s369[] =
  {  4,
    11, 365,
    -1,-267
  };
  static short s370[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s371[] =
  {  2,
    -1,-247
  };
  static short s372[] =
  {  2,
    -1,-249
  };
  static short s373[] =
  {  4,
    12, 450,
    -1,   0
  };
  static short s374[] =
  {  2,
    -1,-250
  };
  static short s375[] =
  {  2,
    -1,-251
  };
  static short s376[] =
  {  4,
    14, 451,
    -1,   0
  };
  static short s377[] =
  {  2,
    -1,-258
  };
  static short s378[] =
  {  4,
    22, 452,
    -1,   0
  };
  static short s379[] =
  {  6,
    17, 453, 22,-257,
    -1,   0
  };
  static short s380[] =
  {  4,
    21, 454,
    -1,-271
  };
  static short s381[] =
  {  4,
    13, 455,
    -1,   0
  };
  static short s382[] =
  {  4,
    12, 456,
    -1,   0
  };
  static short s383[] =
  {  2,
    -1,-334
  };
  static short s384[] =
  {  6,
    18, -72, 38,  61,
    -1,   0
  };
  static short s385[] =
  { 20,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7,
    -1,   0
  };
  static short s386[] =
  {  4,
    13, 270,
    -1,   0
  };
  static short s387[] =
  {  4,
    22, 460,
    -1,   0
  };
  static short s388[] =
  {  6,
    17, 461, 22,-104,
    -1,   0
  };
  static short s389[] =
  {  2,
    -1,-105
  };
  static short s390[] =
  {  2,
    -1,-112
  };
  static short s391[] =
  {  4,
    17, 462,
    -1,-111
  };
  static short s392[] =
  { 94,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19, 463, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 464, 42, 465, 44, 129, 46, 130,
    49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136, 55, 137,
    56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s393[] =
  {  2,
    -1,-117
  };
  static short s394[] =
  {  4,
    22, 469,
    -1,   0
  };
  static short s395[] =
  {  2,
    -1,-102
  };
  static short s396[] =
  {  2,
    -1, -91
  };
  static short s397[] =
  {  2,
    -1, -95
  };
  static short s398[] =
  { 60,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 17, 470, 18, 399, 19, 471, 21, 213, 39, 126,
    41, 127, 42, 128, 59, 139, 60, 140, 61, 141, 62, 214, 63, 215,
    64, 216, 65, 217, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,
   100, 147,
    -1,   0
  };
  static short s399[] =
  {  2,
    -1, -93
  };
  static short s400[] =
  {  2,
    -1, -96
  };
  static short s401[] =
  {  2,
    -1, -97
  };
  static short s402[] =
  {  2,
    -1,-270
  };
  static short s403[] =
  {  8,
    11, 312, 14, -27, 22,-268,
    -1,   0
  };
  static short s404[] =
  {  4,
    22, 474,
    -1,   0
  };
  static short s405[] =
  {  8,
    11, 312, 14, -28, 22, 475,
    -1,   0
  };
  static short s406[] =
  { 46,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    64, 216, 65, 217, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,
   100, 147,
    -1,-242
  };
  static short s407[] =
  {  2,
    -1,-301
  };
  static short s408[] =
  {  2,
    -1,-302
  };
  static short s409[] =
  {  2,
    -1,-303
  };
  static short s410[] =
  {  8,
    16, 322, 66, 323, 67, 324,
    -1,-305
  };
  static short s411[] =
  {  8,
    16, 322, 66, 323, 67, 324,
    -1,-306
  };
  static short s412[] =
  {  6,
    62, 325, 63, 326,
    -1,-308
  };
  static short s413[] =
  {  6,
    62, 325, 63, 326,
    -1,-309
  };
  static short s414[] =
  {  6,
    62, 325, 63, 326,
    -1,-310
  };
  static short s415[] =
  {  8,
    68, 327, 69, 328, 70, 329,
    -1,-312
  };
  static short s416[] =
  {  8,
    68, 327, 69, 328, 70, 329,
    -1,-313
  };
  static short s417[] =
  {  8,
    68, 327, 69, 328, 70, 329,
    -1,-314
  };
  static short s418[] =
  {  8,
    68, 327, 69, 328, 70, 329,
    -1,-315
  };
  static short s419[] =
  {  4,
    11, 209,
    -1,   0
  };
  static short s420[] =
  {  2,
    -1,-316
  };
  static short s421[] =
  { 12,
    71, 330, 72, 331, 73, 332, 74, 333, 75, 334,
    -1,-318
  };
  static short s422[] =
  { 12,
    71, 330, 72, 331, 73, 332, 74, 333, 75, 334,
    -1,-319
  };
  static short s423[] =
  {  6,
    76, 335, 77, 336,
    -1,-321
  };
  static short s424[] =
  {  4,
    78, 337,
    -1,-323
  };
  static short s425[] =
  {  4,
    79, 338,
    -1,-325
  };
  static short s426[] =
  {  4,
    80, 339,
    -1,-327
  };
  static short s427[] =
  {  4,
    81, 340,
    -1,-329
  };
  static short s428[] =
  {  4,
    23, 477,
    -1,   0
  };
  static short s429[] =
  {  4,
    18,  85,
    -1,   0
  };
  static short s430[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s431[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 480, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 481, 46, 130, 49, 131, 50, 482, 51, 483,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s432[] =
  {  4,
    18, 491,
    -1,   0
  };
  static short s433[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s434[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 129, 46, 130, 49, 131, 50, 132, 51, 133,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s435[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 15,-350, 21, 213, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s436[] =
  { 46,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 123, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,
   100, 147,
    -1,   0
  };
  static short s437[] =
  { 22,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 31, 386,
    -1,   0
  };
  static short s438[] =
  {  2,
    -1,-235
  };
  static short s439[] =
  {  4,
    18,  85,
    -1,   0
  };
  static short s440[] =
  {  2,
    -1,-231
  };
  static short s441[] =
  {  4,
    12, 499,
    -1,   0
  };
  static short s442[] =
  {  2,
    -1,-262
  };
  static short s443[] =
  {  4,
    11, 312,
    -1,-268
  };
  static short s444[] =
  {  2,
    -1,-260
  };
  static short s445[] =
  {  2,
    -1,-265
  };
  static short s446[] =
  {  2,
    -1,-263
  };
  static short s447[] =
  {  2,
    -1,-261
  };
  static short s448[] =
  {  4,
    22, 500,
    -1,   0
  };
  static short s449[] =
  {  2,
    -1,-278
  };
  static short s450[] =
  {  4,
    13, 501,
    -1,   0
  };
  static short s451[] =
  {  2,
    -1,-274
  };
  static short s452[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s453[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s454[] =
  {  4,
    21, 504,
    -1,   0
  };
  static short s455[] =
  {  2,
    -1,-279
  };
  static short s456[] =
  {  4,
    18,  71,
    -1,   0
  };
  static short s457[] =
  {  4,
    13, 270,
    -1,   0
  };
  static short s458[] =
  {  4,
    11, 308,
    -1,-107
  };
  static short s459[] =
  {  2,
    -1,-118
  };
  static short s460[] =
  { 22,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 31, 386,
    -1,   0
  };
  static short s461[] =
  {  4,
    13,   7,
    -1,   0
  };
  static short s462[] =
  {  2,
    -1,-122
  };
  static short s463[] =
  {  4,
    21, 509,
    -1,-241
  };
  static short s464[] =
  {  6,
    14, 248, 21, 510,
    -1,   0
  };
  static short s465[] =
  { 94,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19, 511, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136, 55, 137,
    56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s466[] =
  { 94,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19, 513, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136, 55, 137,
    56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s467[] =
  {  4,
    14, 514,
    -1,-280
  };
  static short s468[] =
  {  2,
    -1,-101
  };
  static short s469[] =
  {  4,
    19, 515,
    -1,   0
  };
  static short s470[] =
  {  2,
    -1,-146
  };
  static short s471[] =
  {  2,
    -1,-147
  };
  static short s472[] =
  {  6,
    17, 516, 19, 517,
    -1,   0
  };
  static short s473[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s474[] =
  { 46,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    64, 216, 65, 217, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,
   100, 147,
    -1,   0
  };
  static short s475[] =
  {  2,
    -1,-298
  };
  static short s476[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s477[] =
  {  2,
    -1,-229
  };
  static short s478[] =
  {  4,
    22, 521,
    -1,   0
  };
  static short s479[] =
  {  4,
    23, 522,
    -1, -31
  };
  static short s480[] =
  {  4,
    21, 523,
    -1,   0
  };
  static short s481[] =
  {  4,
    21, 524,
    -1,   0
  };
  static short s482[] =
  {  4,
    21, 525,
    -1,   0
  };
  static short s483[] =
  {  2,
    -1,-194
  };
  static short s484[] =
  {  4,
    45,-167,
    -1,-161
  };
  static short s485[] =
  {  4,
    45, 526,
    -1,   0
  };
  static short s486[] =
  {  4,
    45,-168,
    -1,   0
  };
  static short s487[] =
  {  4,
    45,-169,
    -1,   0
  };
  static short s488[] =
  {  4,
    45,-170,
    -1,   0
  };
  static short s489[] =
  {  4,
    45,-171,
    -1,   0
  };
  static short s490[] =
  {  8,
    19, 527, 47, 528, 48, 529,
    -1,   0
  };
  static short s491[] =
  {  2,
    -1,-197
  };
  static short s492[] =
  {  4,
    22, 534,
    -1,   0
  };
  static short s493[] =
  {  2,
    -1,-209
  };
  static short s494[] =
  {  4,
    15, 535,
    -1,   0
  };
  static short s495[] =
  {  2,
    -1,-222
  };
  static short s496[] =
  {  4,
    22, 536,
    -1,   0
  };
  static short s497[] =
  {  2,
    -1,-237
  };
  static short s498[] =
  {  2,
    -1,-266
  };
  static short s499[] =
  {  4,
    18,  71,
    -1,-252
  };
  static short s500[] =
  {  4,
    21, 538,
    -1,-273
  };
  static short s501[] =
  {  2,
    -1,-259
  };
  static short s502[] =
  {  4,
    22, 539,
    -1,   0
  };
  static short s503[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s504[] =
  {  2,
    -1, -87
  };
  static short s505[] =
  {  4,
    11, 308,
    -1,-108
  };
  static short s506[] =
  {  2,
    -1,-106
  };
  static short s507[] =
  {  2,
    -1,-113
  };
  static short s508[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s509[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s510[] =
  {  2,
    -1,-120
  };
  static short s511[] =
  { 94,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19, 543, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136, 55, 137,
    56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s512[] =
  {  2,
    -1,-121
  };
  static short s513[] =
  { 10,
    13, 381, 41, 544, 42, 545, 59, 382,
    -1,   0
  };
  static short s514[] =
  {  2,
    -1,-145
  };
  static short s515[] =
  { 58,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 18, 399, 19, 546, 21, 213, 39, 126, 41, 127,
    42, 128, 59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216,
    65, 217, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s516[] =
  {  2,
    -1,-144
  };
  static short s517[] =
  {  2,
    -1,-297
  };
  static short s518[] =
  {  2,
    -1,-299
  };
  static short s519[] =
  {  2,
    -1,-331
  };
  static short s520[] =
  {  2,
    -1,-276
  };
  static short s521[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 480, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 481, 46, 130, 49, 131, 50, 482, 51, 483,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s522[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s523[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s524[] =
  { 50,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 15,-214, 21, 123, 31, 351, 39, 126, 41, 127,
    42, 128, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144,
    98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s525[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 129, 46, 130, 49, 131, 50, 132, 51, 133,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s526[] =
  {  2,
    -1,-201
  };
  static short s527[] =
  { 54,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 39, 126, 41, 127, 42, 128, 59, 139,
    60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s528[] =
  {  4,
    23, 555,
    -1,   0
  };
  static short s529[] =
  {  8,
    19, 556, 47, 528, 48, 529,
    -1,   0
  };
  static short s530[] =
  { 98,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19, 559, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    47, 528, 48, 529, 49, 131, 50, 132, 51, 133, 52, 134, 53, 135,
    54, 136, 55, 137, 56, 138, 59, 139, 60, 140, 61, 141, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s531[] =
  {  2,
    -1,-202
  };
  static short s532[] =
  {  2,
    -1,-205
  };
  static short s533[] =
  {  4,
    15, 562,
    -1,   0
  };
  static short s534[] =
  { 48,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 123, 22,-218, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144, 98, 145,
    99, 146,100, 147,
    -1,   0
  };
  static short s535[] =
  {  4,
    18,  85,
    -1,   0
  };
  static short s536[] =
  {  2,
    -1,-253
  };
  static short s537[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s538[] =
  {  2,
    -1,-275
  };
  static short s539[] =
  {  4,
    22, 568,
    -1,   0
  };
  static short s540[] =
  {  4,
    22, 569,
    -1,   0
  };
  static short s541[] =
  {  4,
    22, 570,
    -1,   0
  };
  static short s542[] =
  {  2,
    -1,-119
  };
  static short s543[] =
  {  4,
    21, 571,
    -1,   0
  };
  static short s544[] =
  {  4,
    21, 572,
    -1,   0
  };
  static short s545[] =
  {  2,
    -1,-143
  };
  static short s546[] =
  {  2,
    -1,-148
  };
  static short s547[] =
  {  4,
    45,-185,
    -1,   0
  };
  static short s548[] =
  {  4,
    22, 573,
    -1,   0
  };
  static short s549[] =
  {  4,
    22, 574,
    -1,   0
  };
  static short s550[] =
  {  4,
    15, 575,
    -1,   0
  };
  static short s551[] =
  {  2,
    -1,-195
  };
  static short s552[] =
  {  4,
    23,-353,
    -1,   0
  };
  static short s553[] =
  {  4,
    23, 576,
    -1,   0
  };
  static short s554[] =
  {  2,
    -1,-208
  };
  static short s555[] =
  {  2,
    -1,-199
  };
  static short s556[] =
  { 98,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 19, 577, 21, 123, 26,  21,
    27,  22, 28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125,
    34,  29, 35,  30, 39, 126, 41, 127, 42, 128, 44, 129, 46, 130,
    47, 528, 48, 529, 49, 131, 50, 132, 51, 133, 52, 134, 53, 135,
    54, 136, 55, 137, 56, 138, 59, 139, 60, 140, 61, 141, 95, 142,
    96, 143, 97, 144, 98, 145, 99, 146,100, 147,101,  31,
    -1, -52
  };
  static short s557[] =
  {  2,
    -1,-203
  };
  static short s558[] =
  {  2,
    -1,-200
  };
  static short s559[] =
  { 96,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 21, 123, 26,  21, 27,  22,
    28,  23, 29,  24, 30,  25, 31, 124, 32,  27, 33, 125, 34,  29,
    35,  30, 36, -52, 39, 126, 41, 127, 42, 128, 43, -52, 44, 129,
    46, 130, 49, 131, 50, 132, 51, 133, 52, 134, 53, 135, 54, 136,
    55, 137, 56, 138, 59, 139, 60, 140, 61, 141, 95, 142, 96, 143,
    97, 144, 98, 145, 99, 146,100, 147,101,  31,
    -1,-204
  };
  static short s560[] =
  {  2,
    -1,-206
  };
  static short s561[] =
  {  2,
    -1,-211
  };
  static short s562[] =
  {  4,
    22, 578,
    -1,   0
  };
  static short s563[] =
  {  6,
    17, 437, 22,-220,
    -1,   0
  };
  static short s564[] =
  {  4,
    22,-219,
    -1,   0
  };
  static short s565[] =
  {  2,
    -1,-236
  };
  static short s566[] =
  {  4,
    22, 579,
    -1,   0
  };
  static short s567[] =
  {  4,
    18,  71,
    -1,-254
  };
  static short s568[] =
  {  4,
    15, 581,
    -1,   0
  };
  static short s569[] =
  {  4,
    15, 582,
    -1,   0
  };
  static short s570[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s571[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 213, 22,-256, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s572[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 480, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 481, 46, 130, 49, 131, 50, 482, 51, 483,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s573[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 480, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 481, 46, 130, 49, 131, 50, 482, 51, 483,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s574[] =
  { 56,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 15,-350, 21, 213, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 62, 214, 63, 215, 64, 216, 65, 217,
    95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s575[] =
  {  2,
    -1,-207
  };
  static short s576[] =
  {  2,
    -1,-198
  };
  static short s577[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 121, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 129, 46, 130, 49, 131, 50, 132, 51, 133,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s578[] =
  {  2,
    -1,-277
  };
  static short s579[] =
  {  2,
    -1,-255
  };
  static short s580[] =
  {  2,
    -1,-123
  };
  static short s581[] =
  {  2,
    -1,-124
  };
  static short s582[] =
  {  4,
    22, 589,
    -1,   0
  };
  static short s583[] =
  {  4,
    22, 590,
    -1,   0
  };
  static short s584[] =
  {  4,
    45, 591,
    -1,   0
  };
  static short s585[] =
  {  4,
    45,-210,
    -1,   0
  };
  static short s586[] =
  {  4,
    15, 592,
    -1,   0
  };
  static short s587[] =
  {  2,
    -1,-212
  };
  static short s588[] =
  {  4,
    15, 593,
    -1,   0
  };
  static short s589[] =
  {  4,
    15, 594,
    -1,   0
  };
  static short s590[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 480, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 481, 46, 130, 49, 131, 50, 482, 51, 483,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s591[] =
  { 48,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13,   7, 21, 123, 22,-218, 39, 126, 41, 127, 42, 128,
    59, 139, 60, 140, 61, 141, 95, 142, 96, 143, 97, 144, 98, 145,
    99, 146,100, 147,
    -1,   0
  };
  static short s592[] =
  {  2,
    -1,-125
  };
  static short s593[] =
  {  2,
    -1,-126
  };
  static short s594[] =
  {  4,
    45,-196,
    -1,   0
  };
  static short s595[] =
  {  4,
    22, 597,
    -1,   0
  };
  static short s596[] =
  { 72,
     3,  99,  4, 100,  5, 101,  6, 102,  7, 103,  8, 104,  9, 105,
    10, 106, 13, 480, 15, 122, 18,  85, 21, 123, 33, 251, 39, 126,
    41, 127, 42, 128, 44, 481, 46, 130, 49, 131, 50, 482, 51, 483,
    52, 134, 53, 135, 54, 136, 55, 137, 56, 138, 59, 139, 60, 140,
    61, 141, 95, 142, 96, 143, 97, 144, 98, 145, 99, 146,100, 147,
    -1,   0
  };
  static short s597[] =
  {  4,
    45,-213,
    -1,   0
  };
  static short *action_tab[] =
  {
    s0  +1, s1  +1, s2  +1, s3  +1, s4  +1, s5  +1, s6  +1, s7  +1, 
    s8  +1, s9  +1, s10 +1, s11 +1, s12 +1, s13 +1, s14 +1, s15 +1, 
    s16 +1, s17 +1, s18 +1, s19 +1, s20 +1, s21 +1, s22 +1, s23 +1, 
    s24 +1, s25 +1, s26 +1, s27 +1, s28 +1, s29 +1, s30 +1, s31 +1, 
    s32 +1, s33 +1, s34 +1, s35 +1, s36 +1, s37 +1, s38 +1, s39 +1, 
    s40 +1, s41 +1, s42 +1, s43 +1, s44 +1, s45 +1, s46 +1, s47 +1, 
    s48 +1, s49 +1, s50 +1, s51 +1, s52 +1, s53 +1, s54 +1, s55 +1, 
    s56 +1, s57 +1, s58 +1, s59 +1, s60 +1, s61 +1, s62 +1, s63 +1, 
    s64 +1, s65 +1, s66 +1, s67 +1, s68 +1, s69 +1, s70 +1, s71 +1, 
    s72 +1, s73 +1, s74 +1, s75 +1, s76 +1, s77 +1, s78 +1, s79 +1, 
    s80 +1, s81 +1, s82 +1, s83 +1, s84 +1, s85 +1, s86 +1, s87 +1, 
    s88 +1, s89 +1, s90 +1, s91 +1, s92 +1, s93 +1, s94 +1, s95 +1, 
    s96 +1, s97 +1, s98 +1, s99 +1, s100+1, s101+1, s102+1, s103+1, 
    s104+1, s105+1, s106+1, s107+1, s108+1, s109+1, s110+1, s111+1, 
    s112+1, s113+1, s114+1, s115+1, s116+1, s117+1, s118+1, s119+1, 
    s120+1, s121+1, s122+1, s123+1, s124+1, s125+1, s126+1, s127+1, 
    s128+1, s129+1, s130+1, s131+1, s132+1, s133+1, s134+1, s135+1, 
    s136+1, s137+1, s138+1, s139+1, s140+1, s141+1, s142+1, s143+1, 
    s144+1, s145+1, s146+1, s147+1, s148+1, s149+1, s150+1, s151+1, 
    s152+1, s153+1, s154+1, s155+1, s156+1, s157+1, s158+1, s159+1, 
    s160+1, s161+1, s162+1, s163+1, s164+1, s165+1, s166+1, s167+1, 
    s168+1, s169+1, s170+1, s171+1, s172+1, s173+1, s174+1, s175+1, 
    s176+1, s177+1, s178+1, s179+1, s180+1, s181+1, s182+1, s183+1, 
    s184+1, s185+1, s186+1, s187+1, s188+1, s189+1, s190+1, s191+1, 
    s192+1, s193+1, s194+1, s195+1, s196+1, s197+1, s198+1, s199+1, 
    s200+1, s201+1, s202+1, s203+1, s204+1, s205+1, s206+1, s207+1, 
    s208+1, s209+1, s210+1, s211+1, s212+1, s213+1, s214+1, s215+1, 
    s216+1, s217+1, s218+1, s219+1, s220+1, s221+1, s222+1, s223+1, 
    s224+1, s225+1, s226+1, s227+1, s228+1, s229+1, s230+1, s231+1, 
    s232+1, s233+1, s234+1, s235+1, s236+1, s237+1, s238+1, s239+1, 
    s240+1, s241+1, s242+1, s243+1, s244+1, s245+1, s246+1, s247+1, 
    s248+1, s249+1, s250+1, s251+1, s252+1, s253+1, s254+1, s255+1, 
    s256+1, s257+1, s258+1, s259+1, s260+1, s261+1, s262+1, s263+1, 
    s264+1, s265+1, s266+1, s267+1, s268+1, s269+1, s270+1, s271+1, 
    s272+1, s273+1, s274+1, s275+1, s276+1, s277+1, s278+1, s279+1, 
    s280+1, s281+1, s282+1, s283+1, s284+1, s285+1, s286+1, s287+1, 
    s288+1, s289+1, s290+1, s291+1, s292+1, s293+1, s294+1, s295+1, 
    s296+1, s297+1, s298+1, s299+1, s300+1, s301+1, s302+1, s303+1, 
    s304+1, s305+1, s306+1, s307+1, s308+1, s309+1, s310+1, s311+1, 
    s312+1, s313+1, s314+1, s315+1, s316+1, s317+1, s318+1, s319+1, 
    s320+1, s321+1, s322+1, s323+1, s324+1, s325+1, s326+1, s327+1, 
    s328+1, s329+1, s330+1, s331+1, s332+1, s333+1, s334+1, s335+1, 
    s336+1, s337+1, s338+1, s339+1, s340+1, s341+1, s342+1, s343+1, 
    s344+1, s345+1, s346+1, s347+1, s348+1, s349+1, s350+1, s351+1, 
    s352+1, s353+1, s354+1, s355+1, s356+1, s357+1, s358+1, s359+1, 
    s360+1, s361+1, s362+1, s363+1, s364+1, s365+1, s366+1, s367+1, 
    s368+1, s369+1, s370+1, s371+1, s372+1, s373+1, s374+1, s375+1, 
    s376+1, s377+1, s378+1, s379+1, s380+1, s381+1, s382+1, s383+1, 
    s384+1, s385+1, s386+1, s387+1, s388+1, s389+1, s390+1, s391+1, 
    s392+1, s393+1, s394+1, s395+1, s396+1, s397+1, s398+1, s399+1, 
    s400+1, s401+1, s402+1, s403+1, s404+1, s405+1, s406+1, s407+1, 
    s408+1, s409+1, s410+1, s411+1, s412+1, s413+1, s414+1, s415+1, 
    s416+1, s417+1, s418+1, s419+1, s420+1, s421+1, s422+1, s423+1, 
    s424+1, s425+1, s426+1, s427+1, s428+1, s429+1, s430+1, s431+1, 
    s432+1, s433+1, s434+1, s435+1, s436+1, s437+1, s438+1, s439+1, 
    s440+1, s441+1, s442+1, s443+1, s444+1, s445+1, s446+1, s447+1, 
    s448+1, s449+1, s450+1, s451+1, s452+1, s453+1, s454+1, s455+1, 
    s456+1, s457+1, s458+1, s459+1, s460+1, s461+1, s462+1, s463+1, 
    s464+1, s465+1, s466+1, s467+1, s468+1, s469+1, s470+1, s471+1, 
    s472+1, s473+1, s474+1, s475+1, s476+1, s477+1, s478+1, s479+1, 
    s480+1, s481+1, s482+1, s483+1, s484+1, s485+1, s486+1, s487+1, 
    s488+1, s489+1, s490+1, s491+1, s492+1, s493+1, s494+1, s495+1, 
    s496+1, s497+1, s498+1, s499+1, s500+1, s501+1, s502+1, s503+1, 
    s504+1, s505+1, s506+1, s507+1, s508+1, s509+1, s510+1, s511+1, 
    s512+1, s513+1, s514+1, s515+1, s516+1, s517+1, s518+1, s519+1, 
    s520+1, s521+1, s522+1, s523+1, s524+1, s525+1, s526+1, s527+1, 
    s528+1, s529+1, s530+1, s531+1, s532+1, s533+1, s534+1, s535+1, 
    s536+1, s537+1, s538+1, s539+1, s540+1, s541+1, s542+1, s543+1, 
    s544+1, s545+1, s546+1, s547+1, s548+1, s549+1, s550+1, s551+1, 
    s552+1, s553+1, s554+1, s555+1, s556+1, s557+1, s558+1, s559+1, 
    s560+1, s561+1, s562+1, s563+1, s564+1, s565+1, s566+1, s567+1, 
    s568+1, s569+1, s570+1, s571+1, s572+1, s573+1, s574+1, s575+1, 
    s576+1, s577+1, s578+1, s579+1, s580+1, s581+1, s582+1, s583+1, 
    s584+1, s585+1, s586+1, s587+1, s588+1, s589+1, s590+1, s591+1, 
    s592+1, s593+1, s594+1, s595+1, s596+1, s597+1
  };
  return action_tab;
}

short** java12_parser::reduce_table()
{

  static short s0[] =
  {  10,
    104,  2,105,  3,121,  4,124,  5,
     -1, -1
  };
  static short s1[] =
  {   8,
    115,  7,119,  8,120,  9,
     -1, -1
  };
  static short s4[] =
  {  12,
    122, 11,125, 12,127, 13,129, 14,130, 15,
     -1, -1
  };
  static short s10[] =
  {   8,
    115, 18,119,  8,120,  9,
     -1, -1
  };
  static short s11[] =
  {  18,
    123, 31,126, 32,128, 33,131, 34,132, 35,133, 36,134, 37,135, 38,
     -1, -1
  };
  static short s12[] =
  {   8,
    127, 39,129, 14,130, 15,
     -1, -1
  };
  static short s32[] =
  {  14,
    128, 43,131, 34,132, 35,133, 36,134, 37,135, 38,
     -1, -1
  };
  static short s37[] =
  {   4,
    135, 46,
     -1, -1
  };
  static short s48[] =
  {   6,
    136, 52,139, 53,
     -1, -1
  };
  static short s49[] =
  {   6,
    172, 55,174, 56,
     -1, -1
  };
  static short s51[] =
  {  12,
    113, 57,115, 58,116, 59,119,  8,120,  9,
     -1, -1
  };
  static short s52[] =
  {   6,
    137, 61,140, 62,
     -1, -1
  };
  static short s54[] =
  {  12,
    113, 63,115, 58,117, 64,119,  8,120,  9,
     -1, -1
  };
  static short s55[] =
  {   4,
    173, 66,
     -1, -1
  };
  static short s60[] =
  {  14,
    113, 63,115, 58,117, 68,119,  8,120,  9,141, 69,
     -1, -1
  };
  static short s61[] =
  {   4,
    138, 71,
     -1, -1
  };
  static short s65[] =
  {  26,
    131, 72,132, 73,133, 74,134, 37,135, 38,149, 75,157, 76,175, 77,
    176, 78,177, 79,178, 80,179, 81,
     -1, -1
  };
  static short s67[] =
  {  12,
    113, 63,115, 58,117, 82,119,  8,120,  9,
     -1, -1
  };
  static short s70[] =
  {  30,
    132, 86,133, 87,134, 37,135, 38,142, 88,143, 89,144, 90,145, 91,
    146, 92,147, 93,148, 94,149, 95,150, 96,157, 97,
     -1, -1
  };
  static short s74[] =
  {  24,
    107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,
     -1, -1
  };
  static short s78[] =
  {  22,
    131, 72,132, 73,133, 74,134, 37,135, 38,149, 75,157, 76,177,118,
    178, 80,179, 81,
     -1, -1
  };
  static short s83[] =
  {  12,
    113, 63,115, 58,117,119,119,  8,120,  9,
     -1, -1
  };
  static short s84[] =
  { 112,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,169,155,171,156,181,157,182,158,183,159,184,160,
    185,161,186,162,187,163,188,164,189,165,190,166,191,167,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s85[] =
  {   4,
    148,192,
     -1, -1
  };
  static short s87[] =
  {  26,
    107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,194,120,  9,166,195,
     -1, -1
  };
  static short s89[] =
  {  26,
    132, 86,133, 87,134, 37,135, 38,144,197,145, 91,146, 92,147, 93,
    148, 94,149, 95,150, 96,157, 97,
     -1, -1
  };
  static short s97[] =
  {   6,
    148,199,158,200,
     -1, -1
  };
  static short s106[] =
  {   4,
    159,202,
     -1, -1
  };
  static short s107[] =
  {  10,
    151,204,152,205,153,206,159,207,
     -1, -1
  };
  static short s108[] =
  {   4,
    118,209,
     -1, -1
  };
  static short s115[] =
  {   4,
    118,210,
     -1, -1
  };
  static short s122[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,220,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s123[] =
  {  24,
    107,244,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,
     -1, -1
  };
  static short s130[] =
  {  86,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,251,186,162,187,163,188,164,189,165,
    190,166,191,167,197,168,198,169,199,170,200,171,201,172,202,173,
    203,174,204,175,205,176,206,177,207,178,208,179,209,180,210,181,
    211,182,212,183,213,184,214,185,232,186,233,187,234,188,235,189,
    240,190,256,191,
     -1, -1
  };
  static short s133[] =
  {   4,
    227,255,
     -1, -1
  };
  static short s134[] =
  {   4,
    227,256,
     -1, -1
  };
  static short s135[] =
  {  82,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,257,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,222,258,232,186,233,187,234,188,235,189,240,228,
    241,229,242,230,243,231,244,232,245,233,246,234,247,235,248,236,
    249,237,250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s136[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,259,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s137[] =
  {   4,
    148,260,
     -1, -1
  };
  static short s138[] =
  {  20,
    108,261,110,110,111,111,112,112,113,262,115, 58,116,263,119,  8,
    120,  9,
     -1, -1
  };
  static short s139[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,267,242,230,243,231,
     -1, -1
  };
  static short s140[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,268,242,230,243,231,
     -1, -1
  };
  static short s148[] =
  {   8,
    151,270,152,205,153,206,
     -1, -1
  };
  static short s149[] =
  {   4,
    118,209,
     -1, -1
  };
  static short s151[] =
  {   4,
    118,210,
     -1, -1
  };
  static short s155[] =
  { 108,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,171,156,182,276,183,159,184,160,185,161,186,162,
    187,163,188,164,189,165,190,166,191,167,197,168,198,169,199,170,
    200,171,201,172,202,173,203,174,204,175,205,176,206,177,207,178,
    208,179,209,180,210,181,211,182,212,183,213,184,214,185,232,186,
    233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s191[] =
  {   4,
    257,296,
     -1, -1
  };
  static short s195[] =
  {   6,
    160,300,164,301,
     -1, -1
  };
  static short s202[] =
  {   6,
    160,304,164,301,
     -1, -1
  };
  static short s207[] =
  {   6,
    160,309,164,301,
     -1, -1
  };
  static short s211[] =
  {  86,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,312,186,162,187,163,188,164,189,165,
    190,166,191,167,197,168,198,169,199,170,200,171,201,172,202,173,
    203,174,204,175,205,176,206,177,207,178,208,179,209,180,210,181,
    211,182,212,183,213,184,214,185,232,186,233,187,234,188,235,189,
    240,190,256,191,
     -1, -1
  };
  static short s212[] =
  {  80,
    106,147,108,313,110,110,111,111,112,112,114,218,115,314,119,  8,
    120,  9,155,315,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s213[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,316,242,230,243,231,
     -1, -1
  };
  static short s214[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,317,242,230,243,231,
     -1, -1
  };
  static short s215[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,318,242,230,243,231,
     -1, -1
  };
  static short s216[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,319,242,230,243,231,
     -1, -1
  };
  static short s217[] =
  {   4,
    118,209,
     -1, -1
  };
  static short s219[] =
  {   4,
    118,210,
     -1, -1
  };
  static short s244[] =
  {   8,
    151,342,152,205,153,206,
     -1, -1
  };
  static short s245[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,343,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s248[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,346,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s249[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,347,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s252[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,349,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s253[] =
  {  64,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,171,156,185,351,207,352,208,179,
    209,180,210,181,211,182,212,183,213,184,214,185,221,353,224,354,
    225,355,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s260[] =
  {   8,
    228,361,229,362,231,363,
     -1, -1
  };
  static short s261[] =
  {   8,
    118,365,237,366,239,367,
     -1, -1
  };
  static short s262[] =
  {   8,
    118,368,237,369,239,367,
     -1, -1
  };
  static short s264[] =
  {   4,
    118,210,
     -1, -1
  };
  static short s273[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,373,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s275[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,378,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s281[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,382,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s296[] =
  {  78,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,171,156,208,221,209,222,210,223,211,224,212,225,213,226,
    214,227,232,186,233,187,234,188,235,189,240,228,241,229,242,230,
    243,231,244,232,245,233,246,234,247,235,248,236,249,237,250,238,
    251,239,252,240,253,241,254,242,255,383,256,191,
     -1, -1
  };
  static short s297[] =
  {   6,
    136,384,139, 53,
     -1, -1
  };
  static short s298[] =
  {  30,
    107,386,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,161,387,162,388,163,389,
     -1, -1
  };
  static short s299[] =
  {  14,
    113, 57,115, 58,116,390,119,  8,120,  9,165,391,
     -1, -1
  };
  static short s300[] =
  {   4,
    167,393,
     -1, -1
  };
  static short s302[] =
  {  30,
    107,386,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,161,394,162,388,163,389,
     -1, -1
  };
  static short s306[] =
  {   6,
    152,396,153,206,
     -1, -1
  };
  static short s308[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,154,399,155,400,156,401,171,156,208,221,209,222,210,223,
    211,224,212,225,213,226,214,227,232,186,233,187,234,188,235,189,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s313[] =
  {   6,
    118,403,238,404,
     -1, -1
  };
  static short s314[] =
  {   4,
    118,405,
     -1, -1
  };
  static short s321[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,407,242,230,243,231,
     -1, -1
  };
  static short s322[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,408,242,230,243,231,
     -1, -1
  };
  static short s323[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,409,242,230,243,231,
     -1, -1
  };
  static short s324[] =
  {  52,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,410,
     -1, -1
  };
  static short s325[] =
  {  52,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,411,
     -1, -1
  };
  static short s326[] =
  {  54,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,412,
     -1, -1
  };
  static short s327[] =
  {  54,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,413,
     -1, -1
  };
  static short s328[] =
  {  54,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,414,
     -1, -1
  };
  static short s329[] =
  {  56,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,415,
     -1, -1
  };
  static short s330[] =
  {  56,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,416,
     -1, -1
  };
  static short s331[] =
  {  56,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,417,
     -1, -1
  };
  static short s332[] =
  {  56,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,418,
     -1, -1
  };
  static short s333[] =
  {  22,
    108,419,109,420,110,110,111,111,112,112,113,113,114,114,115,115,
    119,  8,120,  9,
     -1, -1
  };
  static short s334[] =
  {  58,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,421,
     -1, -1
  };
  static short s335[] =
  {  58,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,422,
     -1, -1
  };
  static short s336[] =
  {  60,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,235,248,423,
     -1, -1
  };
  static short s337[] =
  {  62,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,235,248,236,249,424,
     -1, -1
  };
  static short s338[] =
  {  64,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,235,248,236,249,237,250,425,
     -1, -1
  };
  static short s339[] =
  {  66,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,235,248,236,249,237,250,238,251,426,
     -1, -1
  };
  static short s340[] =
  {  68,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,235,248,236,249,237,250,238,251,239,
    252,427,
     -1, -1
  };
  static short s341[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,428,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s350[] =
  {  24,
    107,244,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,
     -1, -1
  };
  static short s361[] =
  {   4,
    231,438,
     -1, -1
  };
  static short s362[] =
  {   4,
    230,440,
     -1, -1
  };
  static short s364[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,441,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s365[] =
  {   4,
    156,442,
     -1, -1
  };
  static short s366[] =
  {   8,
    118,443,238,444,239,445,
     -1, -1
  };
  static short s368[] =
  {   4,
    156,446,
     -1, -1
  };
  static short s369[] =
  {   8,
    118,443,238,447,239,445,
     -1, -1
  };
  static short s370[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,448,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s384[] =
  {   6,
    137,456,140, 62,
     -1, -1
  };
  static short s385[] =
  {  24,
    107,457,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,
     -1, -1
  };
  static short s386[] =
  {   4,
    153,458,
     -1, -1
  };
  static short s392[] =
  { 112,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,168,465,169,466,171,467,182,158,183,159,184,160,
    185,161,186,162,187,163,188,164,189,165,190,166,191,167,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s398[] =
  {  86,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,154,471,155,400,156,401,171,156,180,472,208,221,209,222,
    210,223,211,224,212,225,213,226,214,227,232,186,233,187,234,188,
    235,189,240,228,241,229,242,230,243,231,244,232,245,233,246,234,
    247,235,248,236,249,237,250,238,251,239,252,240,253,241,254,242,
    255,243,256,191,
     -1, -1
  };
  static short s406[] =
  {  44,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,211,224,212,225,213,226,214,227,232,186,233,187,
    234,265,235,266,240,228,242,475,243,231,
     -1, -1
  };
  static short s419[] =
  {   4,
    118,209,
     -1, -1
  };
  static short s429[] =
  {   4,
    148,477,
     -1, -1
  };
  static short s430[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,478,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s431[] =
  {  96,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,483,186,484,187,163,188,164,189,165,
    190,166,191,167,192,485,193,486,194,487,195,488,196,489,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s432[] =
  {   4,
    215,491,
     -1, -1
  };
  static short s433[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,492,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s434[] =
  {  86,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,493,186,162,187,163,188,164,189,165,
    190,166,191,167,197,168,198,169,199,170,200,171,201,172,202,173,
    203,174,204,175,205,176,206,177,207,178,208,179,209,180,210,181,
    211,182,212,183,213,184,214,185,232,186,233,187,234,188,235,189,
    240,190,256,191,
     -1, -1
  };
  static short s435[] =
  {  82,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,257,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,222,494,232,186,233,187,234,188,235,189,240,228,
    241,229,242,230,243,231,244,232,245,233,246,234,247,235,248,236,
    249,237,250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s436[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,171,156,207,495,208,179,209,180,210,181,211,182,212,183,
    213,184,214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s437[] =
  {  26,
    107,386,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,163,496,
     -1, -1
  };
  static short s439[] =
  {   4,
    148,497,
     -1, -1
  };
  static short s452[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,501,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s453[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,502,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s456[] =
  {   4,
    138,504,
     -1, -1
  };
  static short s457[] =
  {   4,
    153,505,
     -1, -1
  };
  static short s460[] =
  {  26,
    107,386,108,108,109,109,110,110,111,111,112,112,113,113,114,114,
    115,115,119,  8,120,  9,163,506,
     -1, -1
  };
  static short s461[] =
  {  12,
    113, 57,115, 58,116,507,119,  8,120,  9,
     -1, -1
  };
  static short s465[] =
  { 110,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,169,511,171,156,182,158,183,159,184,160,185,161,
    186,162,187,163,188,164,189,165,190,166,191,167,197,168,198,169,
    199,170,200,171,201,172,202,173,203,174,204,175,205,176,206,177,
    207,178,208,179,209,180,210,181,211,182,212,183,213,184,214,185,
    232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s466[] =
  { 108,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,171,156,182,276,183,159,184,160,185,161,186,162,
    187,163,188,164,189,165,190,166,191,167,197,168,198,169,199,170,
    200,171,201,172,202,173,203,174,204,175,205,176,206,177,207,178,
    208,179,209,180,210,181,211,182,212,183,213,184,214,185,232,186,
    233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s473[] =
  {  50,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,517,242,230,243,231,
     -1, -1
  };
  static short s474[] =
  {  44,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,211,224,212,225,213,226,214,227,232,186,233,187,
    234,265,235,266,240,228,242,518,243,231,
     -1, -1
  };
  static short s476[] =
  {  72,
    106,147,108,217,110,110,111,111,112,112,114,218,115,264,119,  8,
    120,  9,171,156,209,222,210,223,211,224,212,225,213,226,214,227,
    232,186,233,187,234,265,235,266,240,228,241,229,242,230,243,231,
    244,232,245,233,246,234,247,235,248,236,249,237,250,238,251,239,
    252,240,253,241,254,519,
     -1, -1
  };
  static short s490[] =
  {  10,
    216,529,217,530,218,531,219,532,
     -1, -1
  };
  static short s499[] =
  {   4,
    138,536,
     -1, -1
  };
  static short s503[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,539,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s508[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,540,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s509[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,541,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s511[] =
  { 108,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,171,156,182,276,183,159,184,160,185,161,186,162,
    187,163,188,164,189,165,190,166,191,167,197,168,198,169,199,170,
    200,171,201,172,202,173,203,174,204,175,205,176,206,177,207,178,
    208,179,209,180,210,181,211,182,212,183,213,184,214,185,232,186,
    233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s515[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,154,546,155,400,156,401,171,156,208,221,209,222,210,223,
    211,224,212,225,213,226,214,227,232,186,233,187,234,188,235,189,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s521[] =
  {  96,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,312,186,484,187,163,188,164,189,165,
    190,166,191,167,192,547,193,486,194,487,195,488,196,489,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s522[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,548,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s523[] =
  {  80,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,549,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,232,186,233,187,234,188,235,189,240,228,241,229,
    242,230,243,231,244,232,245,233,246,234,247,235,248,236,249,237,
    250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s524[] =
  {  64,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,171,156,185,351,207,352,208,179,
    209,180,210,181,211,182,212,183,213,184,214,185,221,550,224,354,
    225,355,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s525[] =
  {  86,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,551,186,162,187,163,188,164,189,165,
    190,166,191,167,197,168,198,169,199,170,200,171,201,172,202,173,
    203,174,204,175,205,176,206,177,207,178,208,179,209,180,210,181,
    211,182,212,183,213,184,214,185,232,186,233,187,234,188,235,189,
    240,190,256,191,
     -1, -1
  };
  static short s527[] =
  {  82,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,552,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,220,553,232,186,233,187,234,188,235,189,240,228,
    241,229,242,230,243,231,244,232,245,233,246,234,247,235,248,236,
    249,237,250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s529[] =
  {   8,
    217,556,218,557,219,532,
     -1, -1
  };
  static short s530[] =
  { 112,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,169,559,171,156,182,158,183,159,184,160,185,161,
    186,162,187,163,188,164,189,165,190,166,191,167,197,168,198,169,
    199,170,200,171,201,172,202,173,203,174,204,175,205,176,206,177,
    207,178,208,179,209,180,210,181,211,182,212,183,213,184,214,185,
    219,560,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s534[] =
  {  56,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,171,156,207,352,208,179,209,180,210,181,211,182,212,183,
    213,184,214,185,223,562,225,563,226,564,232,186,233,187,234,188,
    235,189,240,190,256,191,
     -1, -1
  };
  static short s535[] =
  {   4,
    148,565,
     -1, -1
  };
  static short s537[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,566,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s556[] =
  { 112,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,169,559,171,156,182,158,183,159,184,160,185,161,
    186,162,187,163,188,164,189,165,190,166,191,167,197,168,198,169,
    199,170,200,171,201,172,202,173,203,174,204,175,205,176,206,177,
    207,178,208,179,209,180,210,181,211,182,212,183,213,184,214,185,
    219,560,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s559[] =
  { 108,
    106,147,107,148,108,149,109,109,110,110,111,111,112,112,113,113,
    114,150,115,151,119,  8,120,  9,131,152,132,153,133, 36,134, 37,
    135, 38,148,154,171,156,182,276,183,159,184,160,185,161,186,162,
    187,163,188,164,189,165,190,166,191,167,197,168,198,169,199,170,
    200,171,201,172,202,173,203,174,204,175,205,176,206,177,207,178,
    208,179,209,180,210,181,211,182,212,183,213,184,214,185,232,186,
    233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s567[] =
  {   4,
    138,579,
     -1, -1
  };
  static short s570[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,582,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s571[] =
  {  84,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,377,170,583,171,156,208,221,209,222,210,223,211,224,
    212,225,213,226,214,227,232,186,233,187,234,188,235,189,236,379,
    240,228,241,229,242,230,243,231,244,232,245,233,246,234,247,235,
    248,236,249,237,250,238,251,239,252,240,253,241,254,242,255,243,
    256,191,
     -1, -1
  };
  static short s572[] =
  {  96,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,483,186,484,187,163,188,164,189,165,
    190,166,191,167,192,584,193,486,194,487,195,488,196,489,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s573[] =
  {  96,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,493,186,484,187,163,188,164,189,165,
    190,166,191,167,192,585,193,486,194,487,195,488,196,489,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s574[] =
  {  82,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,155,257,171,156,208,221,209,222,210,223,211,224,212,225,
    213,226,214,227,222,586,232,186,233,187,234,188,235,189,240,228,
    241,229,242,230,243,231,244,232,245,233,246,234,247,235,248,236,
    249,237,250,238,251,239,252,240,253,241,254,242,255,243,256,191,
     -1, -1
  };
  static short s577[] =
  {  86,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,587,186,162,187,163,188,164,189,165,
    190,166,191,167,197,168,198,169,199,170,200,171,201,172,202,173,
    203,174,204,175,205,176,206,177,207,178,208,179,209,180,210,181,
    211,182,212,183,213,184,214,185,232,186,233,187,234,188,235,189,
    240,190,256,191,
     -1, -1
  };
  static short s590[] =
  {  96,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,551,186,484,187,163,188,164,189,165,
    190,166,191,167,192,594,193,486,194,487,195,488,196,489,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short s591[] =
  {  56,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,171,156,207,352,208,179,209,180,210,181,211,182,212,183,
    213,184,214,185,223,595,225,563,226,564,232,186,233,187,234,188,
    235,189,240,190,256,191,
     -1, -1
  };
  static short s596[] =
  {  96,
    106,147,108,217,110,110,111,111,112,112,114,218,115,219,119,  8,
    120,  9,148,154,171,156,184,587,186,484,187,163,188,164,189,165,
    190,166,191,167,192,597,193,486,194,487,195,488,196,489,197,168,
    198,169,199,170,200,171,201,172,202,173,203,174,204,175,205,176,
    206,177,207,178,208,179,209,180,210,181,211,182,212,183,213,184,
    214,185,232,186,233,187,234,188,235,189,240,190,256,191,
     -1, -1
  };
  static short *reduce_tab[] =
  {
    s0  +1, s1  +1,      0,      0, s4  +1,      0,      0,      0, 
         0,      0, s10 +1, s11 +1, s12 +1,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
    s32 +1,      0,      0,      0,      0, s37 +1,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
    s48 +1, s49 +1,      0, s51 +1, s52 +1,      0, s54 +1, s55 +1, 
         0,      0,      0,      0, s60 +1, s61 +1,      0,      0, 
         0, s65 +1,      0, s67 +1,      0,      0, s70 +1,      0, 
         0,      0, s74 +1,      0,      0,      0, s78 +1,      0, 
         0,      0,      0, s83 +1, s84 +1, s85 +1,      0, s87 +1, 
         0, s89 +1,      0,      0,      0,      0,      0,      0, 
         0, s97 +1,      0,      0,      0,      0,      0,      0, 
         0,      0, s106+1, s107+1, s108+1,      0,      0,      0, 
         0,      0,      0, s115+1,      0,      0,      0,      0, 
         0,      0, s122+1, s123+1,      0,      0,      0,      0, 
         0,      0, s130+1,      0,      0, s133+1, s134+1, s135+1, 
    s136+1, s137+1, s138+1, s139+1, s140+1,      0,      0,      0, 
         0,      0,      0,      0, s148+1, s149+1,      0, s151+1, 
         0,      0,      0, s155+1,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0, s191+1, 
         0,      0,      0, s195+1,      0,      0,      0,      0, 
         0,      0, s202+1,      0,      0,      0,      0, s207+1, 
         0,      0,      0, s211+1, s212+1, s213+1, s214+1, s215+1, 
    s216+1, s217+1,      0, s219+1,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0, s244+1, s245+1,      0,      0, 
    s248+1, s249+1,      0,      0, s252+1, s253+1,      0,      0, 
         0,      0,      0,      0, s260+1, s261+1, s262+1,      0, 
    s264+1,      0,      0,      0,      0,      0,      0,      0, 
         0, s273+1,      0, s275+1,      0,      0,      0,      0, 
         0, s281+1,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
    s296+1, s297+1, s298+1, s299+1, s300+1,      0, s302+1,      0, 
         0,      0, s306+1,      0, s308+1,      0,      0,      0, 
         0, s313+1, s314+1,      0,      0,      0,      0,      0, 
         0, s321+1, s322+1, s323+1, s324+1, s325+1, s326+1, s327+1, 
    s328+1, s329+1, s330+1, s331+1, s332+1, s333+1, s334+1, s335+1, 
    s336+1, s337+1, s338+1, s339+1, s340+1, s341+1,      0,      0, 
         0,      0,      0,      0,      0,      0, s350+1,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0, s361+1, s362+1,      0, s364+1, s365+1, s366+1,      0, 
    s368+1, s369+1, s370+1,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
    s384+1, s385+1, s386+1,      0,      0,      0,      0,      0, 
    s392+1,      0,      0,      0,      0,      0, s398+1,      0, 
         0,      0,      0,      0,      0,      0, s406+1,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0, s419+1,      0,      0,      0,      0, 
         0,      0,      0,      0,      0, s429+1, s430+1, s431+1, 
    s432+1, s433+1, s434+1, s435+1, s436+1, s437+1,      0, s439+1, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0, s452+1, s453+1,      0,      0, 
    s456+1, s457+1,      0,      0, s460+1, s461+1,      0,      0, 
         0, s465+1, s466+1,      0,      0,      0,      0,      0, 
         0, s473+1, s474+1,      0, s476+1,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0, s490+1,      0,      0,      0,      0,      0, 
         0,      0,      0, s499+1,      0,      0,      0, s503+1, 
         0,      0,      0,      0, s508+1, s509+1,      0, s511+1, 
         0,      0,      0, s515+1,      0,      0,      0,      0, 
         0, s521+1, s522+1, s523+1, s524+1, s525+1,      0, s527+1, 
         0, s529+1, s530+1,      0,      0,      0, s534+1, s535+1, 
         0, s537+1,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0, s556+1,      0,      0, s559+1, 
         0,      0,      0,      0,      0,      0,      0, s567+1, 
         0,      0, s570+1, s571+1, s572+1, s573+1, s574+1,      0, 
         0, s577+1,      0,      0,      0,      0,      0,      0, 
         0,      0,      0,      0,      0,      0, s590+1, s591+1, 
         0,      0,      0,      0, s596+1,      0
  };
  return reduce_tab;
}

java12_parser::prod_entry* java12_parser::production_table()
{

  static prod_entry  production_tab[] =
  {
    {  0, 2},{104, 1},{106, 1},{106, 1},{106, 1},{106, 1},{106, 1},{106, 1},
    {107, 1},{107, 1},{108, 1},{108, 1},{110, 1},{110, 1},{111, 1},{111, 1},
    {111, 1},{111, 1},{111, 1},{112, 1},{112, 1},{109, 1},{109, 1},{113, 1},
    {116, 1},{117, 1},{114, 2},{114, 2},{115, 1},{115, 1},{119, 1},{120, 3},
    {105, 3},{121, 1},{121, 0},{122, 1},{122, 0},{123, 1},{123, 0},{125, 1},
    {125, 2},{126, 1},{126, 2},{124, 3},{127, 1},{127, 1},{129, 3},{130, 5},
    {128, 1},{128, 1},{128, 1},{133, 0},{133, 1},{134, 1},{134, 2},{135, 1},
    {135, 1},{135, 1},{135, 1},{135, 1},{135, 1},{135, 1},{135, 1},{135, 1},
    {135, 1},{135, 1},{131, 6},{139, 2},{136, 0},{136, 1},{140, 2},{137, 0},
    {137, 1},{141, 1},{141, 3},{138, 3},{142, 0},{142, 1},{143, 1},{143, 2},
    {144, 1},{144, 1},{144, 1},{144, 1},{145, 1},{145, 1},{145, 6},{145, 1},
    {149, 4},{151, 1},{151, 3},{152, 1},{152, 3},{153, 1},{153, 3},{154, 1},
    {154, 1},{150, 2},{157, 4},{157, 4},{159, 4},{159, 3},{161, 0},{161, 1},
    {162, 1},{162, 3},{163, 2},{163, 3},{160, 0},{160, 1},{164, 2},{165, 1},
    {165, 3},{158, 1},{158, 1},{146, 2},{147, 4},{166, 4},{167, 4},{167, 3},
    {167, 3},{167, 2},{168, 5},{168, 5},{168, 7},{168, 7},{132, 5},{172, 0},
    {172, 1},{174, 2},{174, 3},{173, 3},{175, 0},{175, 1},{176, 1},{176, 2},
    {177, 1},{177, 1},{177, 1},{177, 1},{178, 1},{179, 2},{156, 4},{156, 3},
    {156, 3},{156, 2},{180, 1},{180, 3},{148, 3},{181, 0},{181, 1},{169, 1},
    {169, 2},{182, 1},{182, 1},{182, 1},{182, 1},{183, 2},{185, 2},{185, 3},
    {184, 1},{184, 1},{184, 1},{184, 1},{184, 1},{184, 1},{192, 1},{192, 1},
    {192, 1},{192, 1},{192, 1},{186, 1},{186, 1},{186, 1},{186, 1},{186, 1},
    {186, 1},{186, 1},{186, 1},{186, 1},{186, 1},{186, 1},{197, 1},{187, 3},
    {193, 3},{198, 2},{207, 1},{207, 1},{207, 1},{207, 1},{207, 1},{207, 1},
    {207, 1},{188, 5},{189, 7},{194, 7},{199, 5},{215, 4},{215, 3},{215, 3},
    {215, 2},{216, 1},{216, 2},{218, 2},{217, 1},{217, 2},{219, 3},{219, 2},
    {190, 5},{195, 5},{200, 7},{191, 9},{196, 9},{221, 0},{221, 1},{224, 1},
    {224, 1},{223, 0},{223, 1},{226, 1},{225, 1},{225, 3},{227, 0},{227, 1},
    {201, 3},{202, 3},{203, 3},{205, 3},{204, 5},{206, 3},{206, 4},{229, 0},
    {229, 1},{228, 1},{228, 2},{231, 5},{230, 2},{171, 1},{171, 1},{232, 1},
    {232, 1},{232, 3},{232, 1},{232, 1},{232, 1},{232, 1},{232, 3},{232, 3},
    {232, 3},{232, 3},{232, 3},{214, 5},{214, 6},{214, 7},{214, 8},{170, 0},
    {170, 1},{236, 1},{236, 3},{233, 4},{233, 4},{233, 4},{233, 4},{237, 1},
    {237, 2},{239, 3},{238, 0},{238, 1},{118, 2},{118, 3},{234, 3},{234, 3},
    {234, 5},{213, 4},{213, 6},{213, 6},{213, 8},{235, 4},{235, 4},{240, 1},
    {240, 1},{240, 1},{240, 1},{211, 2},{212, 2},{241, 1},{241, 1},{241, 2},
    {241, 2},{241, 1},{209, 2},{210, 2},{242, 1},{242, 2},{242, 2},{242, 1},
    {243, 5},{243, 4},{243, 5},{244, 1},{244, 3},{244, 3},{244, 3},{245, 1},
    {245, 3},{245, 3},{246, 1},{246, 3},{246, 3},{246, 3},{247, 1},{247, 3},
    {247, 3},{247, 3},{247, 3},{247, 3},{248, 1},{248, 3},{248, 3},{249, 1},
    {249, 3},{250, 1},{250, 3},{251, 1},{251, 3},{252, 1},{252, 3},{253, 1},
    {253, 3},{254, 1},{254, 5},{255, 1},{255, 1},{208, 3},{256, 1},{256, 1},
    {256, 1},{257, 1},{257, 1},{257, 1},{257, 1},{257, 1},{257, 1},{257, 1},
    {257, 1},{257, 1},{257, 1},{257, 1},{257, 1},{222, 0},{222, 1},{155, 1},
    {220, 1}
  };
  return production_tab;
}

java12_parser::del_entry* java12_parser::delete_table()
{

  static del_entry  delete_tab[] =
  {
      0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 
      1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3, 
      1,   1,   1,   7,   7,   1,   0,   1,   0,   1,   0,   1,   3,   1, 
      3,   7,   1,   1,   7,  31,   1,   1,   1,   0,   1,   1,   3,   1, 
      1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  63,   3,   0,   1, 
      3,   0,   1,   1,   7,   7,   0,   1,   1,   3,   1,   1,   1,   1, 
      1,   1,  63,   1,  15,   1,   7,   1,   7,   1,   7,   1,   1,   3, 
     15,  15,  15,   7,   0,   1,   1,   7,   3,   7,   0,   1,   3,   1, 
      7,   1,   1,   3,  15,  15,  15,   7,   7,   3,  31,  31, 127, 127, 
     31,   0,   1,   3,   7,   7,   0,   1,   1,   3,   1,   1,   1,   1, 
      1,   3,  15,   7,   7,   3,   1,   7,   7,   0,   1,   1,   3,   1, 
      1,   1,   1,   3,   3,   7,   1,   1,   1,   1,   1,   1,   1,   1, 
      1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, 
      1,   7,   7,   3,   1,   1,   1,   1,   1,   1,   1,  31, 127, 127, 
     31,  15,   7,   7,   3,   1,   3,   3,   1,   3,   7,   3,  31,  31, 
    127, 511, 511,   0,   1,   1,   1,   0,   1,   1,   1,   7,   0,   1, 
      7,   7,   7,   7,  31,   7,  15,   0,   1,   1,   3,  31,   3,   1, 
      1,   1,   1,   7,   1,   1,   1,   1,   7,   7,   7,   7,   7,  31, 
     63, 127, 255,   0,   1,   1,   7,  15,  15,  15,  15,   1,   3,   7, 
      0,   1,   3,   7,   7,   7,  31,  15,  63,  63, 255,  15,  15,   1, 
      1,   1,   1,   3,   3,   1,   1,   3,   3,   1,   3,   3,   1,   3, 
      3,   1,  31,  15,  31,   1,   7,   7,   7,   1,   7,   7,   1,   7, 
      7,   7,   1,   7,   7,   7,   7,   7,   1,   7,   7,   1,   7,   1, 
      7,   1,   7,   1,   7,   1,   7,   1,  31,   1,   1,   7,   1,   1, 
      1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   0, 
      1,   1,   1, 
  };
  return delete_tab;
}

void java12_parser::delete_pending_symbols()
{
  /* delete the look ahead symbol */
  if (cur_token != 0)
    {
      delete static_cast<java12_sym*>(cur_token);
      cur_token = 0;
    }
  /* delete the symbols accumulated on the stack */
  for (int i = stack.size(), j=0; 0 < --i; )
    delete static_cast<java12_sym*>(stack.top_ptr()[--j]);
  stack.npop(stack.size());
}

lr_symbol*
java12_parser::do_action(int _act, lr_parser& _parser, lr_symbol** _stack_top)
{
  java12_sym* RESULT;

  switch (_act) {
  
  case 0: // accept
  {
    RESULT = (0);
    break;
  }
  case 1: // goal ::= compilation_unit
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 2: // literal ::= INTEGER_LITERAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 3: // literal ::= FLOATING_POINT_LITERAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 4: // literal ::= BOOLEAN_LITERAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 5: // literal ::= CHARACTER_LITERAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 6: // literal ::= STRING_LITERAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 7: // literal ::= NULL_LITERAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 8: // type ::= primitive_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 9: // type ::= reference_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 10: // primitive_type ::= numeric_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 11: // primitive_type ::= BOOLEAN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 12: // numeric_type ::= integral_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 13: // numeric_type ::= floating_point_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 14: // integral_type ::= BYTE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 15: // integral_type ::= SHORT
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 16: // integral_type ::= INT
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 17: // integral_type ::= LONG
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 18: // integral_type ::= CHAR
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 19: // floating_point_type ::= FLOAT
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 20: // floating_point_type ::= DOUBLE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 21: // reference_type ::= class_or_interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 22: // reference_type ::= array_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 23: // class_or_interface_type ::= name
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 24: // class_type ::= class_or_interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 25: // interface_type ::= class_or_interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 26: // array_type ::= primitive_type dims
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 27: // array_type ::= name dims
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 28: // name ::= simple_name
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 29: // name ::= qualified_name
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 30: // simple_name ::= IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 31: // qualified_name ::= name DOT IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 32: // compilation_unit ::= package_declaration_opt import_declarations_opt type_declarations_opt
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 33: // package_declaration_opt ::= package_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 34: // package_declaration_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 35: // import_declarations_opt ::= import_declarations
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 36: // import_declarations_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 37: // type_declarations_opt ::= type_declarations
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 38: // type_declarations_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 39: // import_declarations ::= import_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 40: // import_declarations ::= import_declarations import_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 41: // type_declarations ::= type_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 42: // type_declarations ::= type_declarations type_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 43: // package_declaration ::= PACKAGE name SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 44: // import_declaration ::= single_type_import_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 45: // import_declaration ::= type_import_on_demand_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 46: // single_type_import_declaration ::= IMPORT name SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 47: // type_import_on_demand_declaration ::= IMPORT name DOT MULT SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 48: // type_declaration ::= class_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 49: // type_declaration ::= interface_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 50: // type_declaration ::= SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 51: // modifiers_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 52: // modifiers_opt ::= modifiers
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 53: // modifiers ::= modifier
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 54: // modifiers ::= modifiers modifier
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 55: // modifier ::= PUBLIC
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 56: // modifier ::= PROTECTED
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 57: // modifier ::= PRIVATE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 58: // modifier ::= STATIC
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 59: // modifier ::= ABSTRACT
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 60: // modifier ::= FINAL
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 61: // modifier ::= NATIVE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 62: // modifier ::= SYNCHRONIZED
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 63: // modifier ::= TRANSIENT
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 64: // modifier ::= VOLATILE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 65: // modifier ::= STRICTFP
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 66: // class_declaration ::= modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 67: // super ::= EXTENDS class_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 68: // super_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 69: // super_opt ::= super
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 70: // interfaces ::= IMPLEMENTS interface_type_list
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 71: // interfaces_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 72: // interfaces_opt ::= interfaces
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 73: // interface_type_list ::= interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 74: // interface_type_list ::= interface_type_list COMMA interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 75: // class_body ::= LBRACE class_body_declarations_opt RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 76: // class_body_declarations_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 77: // class_body_declarations_opt ::= class_body_declarations
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 78: // class_body_declarations ::= class_body_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 79: // class_body_declarations ::= class_body_declarations class_body_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 80: // class_body_declaration ::= class_member_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 81: // class_body_declaration ::= static_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 82: // class_body_declaration ::= constructor_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 83: // class_body_declaration ::= block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 84: // class_member_declaration ::= field_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 85: // class_member_declaration ::= method_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 86: // class_member_declaration ::= modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 87: // class_member_declaration ::= interface_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 88: // field_declaration ::= modifiers_opt type variable_declarators SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 89: // variable_declarators ::= variable_declarator
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 90: // variable_declarators ::= variable_declarators COMMA variable_declarator
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 91: // variable_declarator ::= variable_declarator_id
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 92: // variable_declarator ::= variable_declarator_id EQ variable_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 93: // variable_declarator_id ::= IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 94: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 95: // variable_initializer ::= expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 96: // variable_initializer ::= array_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 97: // method_declaration ::= method_header method_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 98: // method_header ::= modifiers_opt type method_declarator throws_opt
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 99: // method_header ::= modifiers_opt VOID method_declarator throws_opt
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 100: // method_declarator ::= IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 101: // method_declarator ::= method_declarator LBRACK RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 102: // formal_parameter_list_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 103: // formal_parameter_list_opt ::= formal_parameter_list
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 104: // formal_parameter_list ::= formal_parameter
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 105: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 106: // formal_parameter ::= type variable_declarator_id
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 107: // formal_parameter ::= FINAL type variable_declarator_id
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 108: // throws_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 109: // throws_opt ::= throws
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 110: // throws ::= THROWS class_type_list
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 111: // class_type_list ::= class_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 112: // class_type_list ::= class_type_list COMMA class_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 113: // method_body ::= block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 114: // method_body ::= SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 115: // static_initializer ::= STATIC block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 116: // constructor_declaration ::= modifiers_opt constructor_declarator throws_opt constructor_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 117: // constructor_declarator ::= simple_name LPAREN formal_parameter_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 118: // constructor_body ::= LBRACE explicit_constructor_invocation block_statements RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 119: // constructor_body ::= LBRACE explicit_constructor_invocation RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 120: // constructor_body ::= LBRACE block_statements RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 121: // constructor_body ::= LBRACE RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 122: // explicit_constructor_invocation ::= THIS LPAREN argument_list_opt RPAREN SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 123: // explicit_constructor_invocation ::= SUPER LPAREN argument_list_opt RPAREN SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 124: // explicit_constructor_invocation ::= primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 125: // explicit_constructor_invocation ::= primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 126: // interface_declaration ::= modifiers_opt INTERFACE IDENTIFIER extends_interfaces_opt interface_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 127: // extends_interfaces_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 128: // extends_interfaces_opt ::= extends_interfaces
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 129: // extends_interfaces ::= EXTENDS interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 130: // extends_interfaces ::= extends_interfaces COMMA interface_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 131: // interface_body ::= LBRACE interface_member_declarations_opt RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 132: // interface_member_declarations_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 133: // interface_member_declarations_opt ::= interface_member_declarations
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 134: // interface_member_declarations ::= interface_member_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 135: // interface_member_declarations ::= interface_member_declarations interface_member_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 136: // interface_member_declaration ::= constant_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 137: // interface_member_declaration ::= abstract_method_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 138: // interface_member_declaration ::= class_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 139: // interface_member_declaration ::= interface_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 140: // constant_declaration ::= field_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 141: // abstract_method_declaration ::= method_header SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 142: // array_initializer ::= LBRACE variable_initializers COMMA RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 143: // array_initializer ::= LBRACE variable_initializers RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 144: // array_initializer ::= LBRACE COMMA RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 145: // array_initializer ::= LBRACE RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 146: // variable_initializers ::= variable_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 147: // variable_initializers ::= variable_initializers COMMA variable_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 148: // block ::= LBRACE block_statements_opt RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 149: // block_statements_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 150: // block_statements_opt ::= block_statements
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 151: // block_statements ::= block_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 152: // block_statements ::= block_statements block_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 153: // block_statement ::= local_variable_declaration_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 154: // block_statement ::= statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 155: // block_statement ::= class_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 156: // block_statement ::= interface_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 157: // local_variable_declaration_statement ::= local_variable_declaration SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 158: // local_variable_declaration ::= type variable_declarators
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 159: // local_variable_declaration ::= FINAL type variable_declarators
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 160: // statement ::= statement_without_trailing_substatement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 161: // statement ::= labeled_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 162: // statement ::= if_then_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 163: // statement ::= if_then_else_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 164: // statement ::= while_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 165: // statement ::= for_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 166: // statement_no_short_if ::= statement_without_trailing_substatement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 167: // statement_no_short_if ::= labeled_statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 168: // statement_no_short_if ::= if_then_else_statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 169: // statement_no_short_if ::= while_statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 170: // statement_no_short_if ::= for_statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 171: // statement_without_trailing_substatement ::= block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 172: // statement_without_trailing_substatement ::= empty_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 173: // statement_without_trailing_substatement ::= expression_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 174: // statement_without_trailing_substatement ::= switch_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 175: // statement_without_trailing_substatement ::= do_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 176: // statement_without_trailing_substatement ::= break_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 177: // statement_without_trailing_substatement ::= continue_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 178: // statement_without_trailing_substatement ::= return_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 179: // statement_without_trailing_substatement ::= synchronized_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 180: // statement_without_trailing_substatement ::= throw_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 181: // statement_without_trailing_substatement ::= try_statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 182: // empty_statement ::= SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 183: // labeled_statement ::= IDENTIFIER COLON statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 184: // labeled_statement_no_short_if ::= IDENTIFIER COLON statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 185: // expression_statement ::= statement_expression SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 186: // statement_expression ::= assignment
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 187: // statement_expression ::= preincrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 188: // statement_expression ::= predecrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 189: // statement_expression ::= postincrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 190: // statement_expression ::= postdecrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 191: // statement_expression ::= method_invocation
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 192: // statement_expression ::= class_instance_creation_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 193: // if_then_statement ::= IF LPAREN expression RPAREN statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 194: // if_then_else_statement ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 195: // if_then_else_statement_no_short_if ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 196: // switch_statement ::= SWITCH LPAREN expression RPAREN switch_block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 197: // switch_block ::= LBRACE switch_block_statement_groups switch_labels RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 198: // switch_block ::= LBRACE switch_block_statement_groups RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 199: // switch_block ::= LBRACE switch_labels RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 200: // switch_block ::= LBRACE RBRACE
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 201: // switch_block_statement_groups ::= switch_block_statement_group
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 202: // switch_block_statement_groups ::= switch_block_statement_groups switch_block_statement_group
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 203: // switch_block_statement_group ::= switch_labels block_statements
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 204: // switch_labels ::= switch_label
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 205: // switch_labels ::= switch_labels switch_label
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 206: // switch_label ::= CASE constant_expression COLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 207: // switch_label ::= DEFAULT COLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 208: // while_statement ::= WHILE LPAREN expression RPAREN statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 209: // while_statement_no_short_if ::= WHILE LPAREN expression RPAREN statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 210: // do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 211: // for_statement ::= FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 212: // for_statement_no_short_if ::= FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 213: // for_init_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 214: // for_init_opt ::= for_init
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 215: // for_init ::= statement_expression_list
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 216: // for_init ::= local_variable_declaration
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 217: // for_update_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 218: // for_update_opt ::= for_update
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 219: // for_update ::= statement_expression_list
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 220: // statement_expression_list ::= statement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 221: // statement_expression_list ::= statement_expression_list COMMA statement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 222: // identifier_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 223: // identifier_opt ::= IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 224: // break_statement ::= BREAK identifier_opt SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 225: // continue_statement ::= CONTINUE identifier_opt SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 226: // return_statement ::= RETURN expression_opt SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 227: // throw_statement ::= THROW expression SEMICOLON
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 228: // synchronized_statement ::= SYNCHRONIZED LPAREN expression RPAREN block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 229: // try_statement ::= TRY block catches
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 230: // try_statement ::= TRY block catches_opt finally
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 231: // catches_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 232: // catches_opt ::= catches
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 233: // catches ::= catch_clause
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 234: // catches ::= catches catch_clause
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 235: // catch_clause ::= CATCH LPAREN formal_parameter RPAREN block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 236: // finally ::= FINALLY block
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 237: // primary ::= primary_no_new_array
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 238: // primary ::= array_creation_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 239: // primary_no_new_array ::= literal
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 240: // primary_no_new_array ::= THIS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 241: // primary_no_new_array ::= LPAREN expression RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 242: // primary_no_new_array ::= class_instance_creation_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 243: // primary_no_new_array ::= field_access
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 244: // primary_no_new_array ::= method_invocation
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 245: // primary_no_new_array ::= array_access
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 246: // primary_no_new_array ::= primitive_type DOT CLASS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 247: // primary_no_new_array ::= VOID DOT CLASS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 248: // primary_no_new_array ::= array_type DOT CLASS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 249: // primary_no_new_array ::= name DOT CLASS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 250: // primary_no_new_array ::= name DOT THIS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 251: // class_instance_creation_expression ::= NEW class_type LPAREN argument_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 252: // class_instance_creation_expression ::= NEW class_type LPAREN argument_list_opt RPAREN class_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 253: // class_instance_creation_expression ::= primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 254: // class_instance_creation_expression ::= primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN class_body
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 255: // argument_list_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 256: // argument_list_opt ::= argument_list
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 257: // argument_list ::= expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 258: // argument_list ::= argument_list COMMA expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 259: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 260: // array_creation_expression ::= NEW class_or_interface_type dim_exprs dims_opt
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 261: // array_creation_expression ::= NEW primitive_type dims array_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 262: // array_creation_expression ::= NEW class_or_interface_type dims array_initializer
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 263: // dim_exprs ::= dim_expr
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 264: // dim_exprs ::= dim_exprs dim_expr
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 265: // dim_expr ::= LBRACK expression RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 266: // dims_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 267: // dims_opt ::= dims
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 268: // dims ::= LBRACK RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 269: // dims ::= dims LBRACK RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 270: // field_access ::= primary DOT IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 271: // field_access ::= SUPER DOT IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 272: // field_access ::= name DOT SUPER DOT IDENTIFIER
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 273: // method_invocation ::= name LPAREN argument_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 274: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 275: // method_invocation ::= SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 276: // method_invocation ::= name DOT SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 277: // array_access ::= name LBRACK expression RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 278: // array_access ::= primary_no_new_array LBRACK expression RBRACK
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 279: // postfix_expression ::= primary
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 280: // postfix_expression ::= name
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 281: // postfix_expression ::= postincrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 282: // postfix_expression ::= postdecrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 283: // postincrement_expression ::= postfix_expression PLUSPLUS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 284: // postdecrement_expression ::= postfix_expression MINUSMINUS
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 285: // unary_expression ::= preincrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 286: // unary_expression ::= predecrement_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 287: // unary_expression ::= PLUS unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 288: // unary_expression ::= MINUS unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 289: // unary_expression ::= unary_expression_not_plus_minus
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 290: // preincrement_expression ::= PLUSPLUS unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 291: // predecrement_expression ::= MINUSMINUS unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 292: // unary_expression_not_plus_minus ::= postfix_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 293: // unary_expression_not_plus_minus ::= COMP unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 294: // unary_expression_not_plus_minus ::= NOT unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 295: // unary_expression_not_plus_minus ::= cast_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 296: // cast_expression ::= LPAREN primitive_type dims_opt RPAREN unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 297: // cast_expression ::= LPAREN expression RPAREN unary_expression_not_plus_minus
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 298: // cast_expression ::= LPAREN name dims RPAREN unary_expression_not_plus_minus
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 299: // multiplicative_expression ::= unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 300: // multiplicative_expression ::= multiplicative_expression MULT unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 301: // multiplicative_expression ::= multiplicative_expression DIV unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 302: // multiplicative_expression ::= multiplicative_expression MOD unary_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 303: // additive_expression ::= multiplicative_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 304: // additive_expression ::= additive_expression PLUS multiplicative_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 305: // additive_expression ::= additive_expression MINUS multiplicative_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 306: // shift_expression ::= additive_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 307: // shift_expression ::= shift_expression LSHIFT additive_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 308: // shift_expression ::= shift_expression RSHIFT additive_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 309: // shift_expression ::= shift_expression URSHIFT additive_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 310: // relational_expression ::= shift_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 311: // relational_expression ::= relational_expression LT shift_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 312: // relational_expression ::= relational_expression GT shift_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 313: // relational_expression ::= relational_expression LTEQ shift_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 314: // relational_expression ::= relational_expression GTEQ shift_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 315: // relational_expression ::= relational_expression INSTANCEOF reference_type
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 316: // equality_expression ::= relational_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 317: // equality_expression ::= equality_expression EQEQ relational_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 318: // equality_expression ::= equality_expression NOTEQ relational_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 319: // and_expression ::= equality_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 320: // and_expression ::= and_expression AND equality_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 321: // exclusive_or_expression ::= and_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 322: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 323: // inclusive_or_expression ::= exclusive_or_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 324: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 325: // conditional_and_expression ::= inclusive_or_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 326: // conditional_and_expression ::= conditional_and_expression ANDAND inclusive_or_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 327: // conditional_or_expression ::= conditional_and_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 328: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 329: // conditional_expression ::= conditional_or_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 330: // conditional_expression ::= conditional_or_expression QUESTION expression COLON conditional_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 331: // assignment_expression ::= conditional_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 332: // assignment_expression ::= assignment
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 333: // assignment ::= left_hand_side assignment_operator assignment_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 334: // left_hand_side ::= name
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 335: // left_hand_side ::= field_access
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 336: // left_hand_side ::= array_access
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 337: // assignment_operator ::= EQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 338: // assignment_operator ::= MULTEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 339: // assignment_operator ::= DIVEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 340: // assignment_operator ::= MODEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 341: // assignment_operator ::= PLUSEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 342: // assignment_operator ::= MINUSEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 343: // assignment_operator ::= LSHIFTEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 344: // assignment_operator ::= RSHIFTEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 345: // assignment_operator ::= URSHIFTEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 346: // assignment_operator ::= ANDEQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 347: // assignment_operator ::= XOREQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 348: // assignment_operator ::= OREQ
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 349: // expression_opt ::=
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 350: // expression_opt ::= expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 351: // expression ::= assignment_expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  case 352: // constant_expression ::= expression
  {
    java12_sym* result_sym = new java12_sym;

    // (no user action);

    RESULT = result_sym;
    break;
  }
  default:
    _parser.report_fatal_error("java12_parser::do_action: Unmatched action number.");
  }

  int  top=0;
  for (unsigned del_word = delete_table()[_act]; del_word != 0; del_word >>= 1) {
    --top;
    if (del_word & 1)
      delete static_cast<java12_sym*>(_stack_top[top]);
  }
  return RESULT;
}


#include <stdio.h>

extern intptr_t yylex();
extern int src_lineno;

extern "C" int yywrap() { return 1; }

class java12_lexer : public scanner
{
  public:
    lr_symbol* next_token()
    {
      return (lr_symbol*)yylex();
    }
};

int main()
{
  java12_lexer	lexer;
  java12_parser parser(&lexer);

  int res;
  try {
    parser.parse();
    printf("%d line(s) successfully parsed", src_lineno);
    res = src_lineno;
  }
  catch (lr_parser::xfatal& exn) {
    printf("line %d: Syntax error", src_lineno);
    res = -src_lineno;
  }

  return res;
}

